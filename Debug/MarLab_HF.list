
MarLab_HF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004410  08004410  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004418  08004418  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000409c  20000074  08004494  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004110  08004494  00024110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b81  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195d  00000000  00000000  00028c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002acf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205f7  00000000  00000000  0002b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ee0  00000000  00000000  0004b9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6332  00000000  00000000  000548cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ac01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002434  00000000  00000000  0011ac54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004224 	.word	0x08004224

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004224 	.word	0x08004224

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <frames_to_command>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void frames_to_command(char* c)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	// Függvény, ami az aktuális frame-et paranccsá alakítja

	// Az első karaktere egy '/' jel, ami azt jelzi, hogy parancs érkezett
	c[0] = '/';
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	222f      	movs	r2, #47	; 0x2f
 80005e4:	701a      	strb	r2, [r3, #0]
	// Majd végigmegyünk a frame 64 db pixelén
	for (int i = 0; i < 64; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e019      	b.n	8000620 <frames_to_command+0x48>
	{
		// És ha a frame adott pixele igaz tárolt értékű
		if (frames[current_frame][i])
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <frames_to_command+0x74>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <frames_to_command+0x78>)
 80005f2:	019b      	lsls	r3, r3, #6
 80005f4:	441a      	add	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <frames_to_command+0x36>
			// Akkor a parancsba 1-est állítunk be
			c[i + 1] = '1';
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3301      	adds	r3, #1
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4413      	add	r3, r2
 8000608:	2231      	movs	r2, #49	; 0x31
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e005      	b.n	800061a <frames_to_command+0x42>
		// Ellenkező esetben pedig 0-t
		else
			c[i + 1] = '0';
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 64; i++)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b3f      	cmp	r3, #63	; 0x3f
 8000624:	dde2      	ble.n	80005ec <frames_to_command+0x14>
	}
	// Nem feledkezünk el a sorvége és a lezáró karakterekről sem
	c[65] = '\r';
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3341      	adds	r3, #65	; 0x41
 800062a:	220d      	movs	r2, #13
 800062c:	701a      	strb	r2, [r3, #0]
	c[66] = '\n';
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3342      	adds	r3, #66	; 0x42
 8000632:	220a      	movs	r2, #10
 8000634:	701a      	strb	r2, [r3, #0]
	c[67] = '\0';
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3343      	adds	r3, #67	; 0x43
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20003f1c 	.word	0x20003f1c
 8000650:	20000090 	.word	0x20000090

08000654 <handle_command>:

void handle_command()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	// Függvény, ami jelekezeli a beérkezett parancsot

	// Hogyha frame-ekre vonatkozó parancs jött be és azok közül is az első
	// (ez tartalmazza, hogy hány tovább valódi frame fog beérkezni)
	if (command_in[0] == '/' && !incoming_animation)
 800065a:	4b49      	ldr	r3, [pc, #292]	; (8000780 <handle_command+0x12c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b2f      	cmp	r3, #47	; 0x2f
 8000660:	d115      	bne.n	800068e <handle_command+0x3a>
 8000662:	4b48      	ldr	r3, [pc, #288]	; (8000784 <handle_command+0x130>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f083 0301 	eor.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00e      	beq.n	800068e <handle_command+0x3a>
	{
		// Akkor az animációnk inenntől nem kész a lejátszásra
		animation_ready = false;
 8000670:	4b45      	ldr	r3, [pc, #276]	; (8000788 <handle_command+0x134>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
		// Ugyanis éppen töltünk le egy új animációt
		incoming_animation = true;
 8000676:	4b43      	ldr	r3, [pc, #268]	; (8000784 <handle_command+0x130>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
		// Bekérjük a beérkező frame-ek számát
		sscanf(command_in, "/%d\r\n", &frame_number);
 800067c:	4a43      	ldr	r2, [pc, #268]	; (800078c <handle_command+0x138>)
 800067e:	4944      	ldr	r1, [pc, #272]	; (8000790 <handle_command+0x13c>)
 8000680:	483f      	ldr	r0, [pc, #252]	; (8000780 <handle_command+0x12c>)
 8000682:	f002 ffff 	bl	8003684 <siscanf>
		// És beállítjuk, hogy jelenleg 0 frame van elmentve ezekből
		frames_saved = 0;
 8000686:	4b43      	ldr	r3, [pc, #268]	; (8000794 <handle_command+0x140>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
	{
 800068c:	e073      	b.n	8000776 <handle_command+0x122>
	}
	// Hogyha frame-ekre vonatkozó parancs érkezik, de már nem az első
	else if (command_in[0] == '/' && incoming_animation)
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <handle_command+0x12c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b2f      	cmp	r3, #47	; 0x2f
 8000694:	d142      	bne.n	800071c <handle_command+0xc8>
 8000696:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <handle_command+0x130>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d03e      	beq.n	800071c <handle_command+0xc8>
	{
		// Akkor végigmegyünk a parancson (frame pixeljein)
		for (int i = 1; i < 65; i++)
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	e023      	b.n	80006ec <handle_command+0x98>
		{
			// És ha a parancs adott bitje 0
			if (command_in[i] == '0')
 80006a4:	4a36      	ldr	r2, [pc, #216]	; (8000780 <handle_command+0x12c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b30      	cmp	r3, #48	; 0x30
 80006ae:	d10a      	bne.n	80006c6 <handle_command+0x72>
				// Akkor hamis értéket mentünk el a pixelhez
				frames[frames_saved][i - 1] = false;
 80006b0:	4b38      	ldr	r3, [pc, #224]	; (8000794 <handle_command+0x140>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3b01      	subs	r3, #1
 80006b8:	4937      	ldr	r1, [pc, #220]	; (8000798 <handle_command+0x144>)
 80006ba:	0192      	lsls	r2, r2, #6
 80006bc:	440a      	add	r2, r1
 80006be:	4413      	add	r3, r2
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
 80006c4:	e00f      	b.n	80006e6 <handle_command+0x92>
			// Hogyha pedig az adott bit 1-es
			else if (command_in[i] == '1')
 80006c6:	4a2e      	ldr	r2, [pc, #184]	; (8000780 <handle_command+0x12c>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b31      	cmp	r3, #49	; 0x31
 80006d0:	d109      	bne.n	80006e6 <handle_command+0x92>
				// Akkor igaz értéket mentünk el a pixelhez
				frames[frames_saved][i - 1] = true;
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <handle_command+0x140>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3b01      	subs	r3, #1
 80006da:	492f      	ldr	r1, [pc, #188]	; (8000798 <handle_command+0x144>)
 80006dc:	0192      	lsls	r2, r2, #6
 80006de:	440a      	add	r2, r1
 80006e0:	4413      	add	r3, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 65; i++)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b40      	cmp	r3, #64	; 0x40
 80006f0:	ddd8      	ble.n	80006a4 <handle_command+0x50>
		}
		// Egy újabb frame elémentésre került
		frames_saved++;
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <handle_command+0x140>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	4a26      	ldr	r2, [pc, #152]	; (8000794 <handle_command+0x140>)
 80006fa:	6013      	str	r3, [r2, #0]

		// Hogyha már megvagyunk minden frame-mel
		if (frames_saved == frame_number)
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <handle_command+0x140>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <handle_command+0x138>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d136      	bne.n	8000776 <handle_command+0x122>
		{
			// Akkor az animációnk észen áll a lejátszásra
			animation_ready = true;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <handle_command+0x134>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
			// És már nincsen letöltés
			incoming_animation = false;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <handle_command+0x130>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
			// És kezdjük a legjátszást a legelső frame-től
			current_frame = 0;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <handle_command+0x148>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
		if (frames_saved == frame_number)
 800071a:	e02c      	b.n	8000776 <handle_command+0x122>
		}
	}
	// Hogyha az első gombot nyomták meg
	else if (!strcmp(command_in, "b0\r\n"))
 800071c:	4920      	ldr	r1, [pc, #128]	; (80007a0 <handle_command+0x14c>)
 800071e:	4818      	ldr	r0, [pc, #96]	; (8000780 <handle_command+0x12c>)
 8000720:	f7ff fd76 	bl	8000210 <strcmp>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d104      	bne.n	8000734 <handle_command+0xe0>
		// Akkor 1 FPS-nek megfelelő időt állítunk be
		time = 1000;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <handle_command+0x150>)
 800072c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000730:	601a      	str	r2, [r3, #0]
		time = 40;
	// Hogyha a negyedik gombot nyomták meg
	else if (!strcmp(command_in, "b3\r\n"))
		// Akkor 30.3 FPS-nek megfelelő időt állítunk be
		time = 33;
}
 8000732:	e020      	b.n	8000776 <handle_command+0x122>
	else if (!strcmp(command_in, "b1\r\n"))
 8000734:	491c      	ldr	r1, [pc, #112]	; (80007a8 <handle_command+0x154>)
 8000736:	4812      	ldr	r0, [pc, #72]	; (8000780 <handle_command+0x12c>)
 8000738:	f7ff fd6a 	bl	8000210 <strcmp>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d103      	bne.n	800074a <handle_command+0xf6>
		time = 100;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <handle_command+0x150>)
 8000744:	2264      	movs	r2, #100	; 0x64
 8000746:	601a      	str	r2, [r3, #0]
}
 8000748:	e015      	b.n	8000776 <handle_command+0x122>
	else if (!strcmp(command_in, "b2\r\n"))
 800074a:	4918      	ldr	r1, [pc, #96]	; (80007ac <handle_command+0x158>)
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <handle_command+0x12c>)
 800074e:	f7ff fd5f 	bl	8000210 <strcmp>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d103      	bne.n	8000760 <handle_command+0x10c>
		time = 40;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <handle_command+0x150>)
 800075a:	2228      	movs	r2, #40	; 0x28
 800075c:	601a      	str	r2, [r3, #0]
}
 800075e:	e00a      	b.n	8000776 <handle_command+0x122>
	else if (!strcmp(command_in, "b3\r\n"))
 8000760:	4913      	ldr	r1, [pc, #76]	; (80007b0 <handle_command+0x15c>)
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <handle_command+0x12c>)
 8000764:	f7ff fd54 	bl	8000210 <strcmp>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <handle_command+0x122>
		time = 33;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <handle_command+0x150>)
 8000770:	2221      	movs	r2, #33	; 0x21
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	e7ff      	b.n	8000776 <handle_command+0x122>
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20003f8c 	.word	0x20003f8c
 8000784:	20003f11 	.word	0x20003f11
 8000788:	20003f10 	.word	0x20003f10
 800078c:	20003f14 	.word	0x20003f14
 8000790:	0800423c 	.word	0x0800423c
 8000794:	20003f18 	.word	0x20003f18
 8000798:	20000090 	.word	0x20000090
 800079c:	20003f1c 	.word	0x20003f1c
 80007a0:	08004244 	.word	0x08004244
 80007a4:	20000000 	.word	0x20000000
 80007a8:	0800424c 	.word	0x0800424c
 80007ac:	08004254 	.word	0x08004254
 80007b0:	0800425c 	.word	0x0800425c

080007b4 <send_frame>:

void send_frame()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	// Függvény, mi kiküldi a jelenlegi frame parancsát

	// Először is elkészítjük a parancsot
	frames_to_command(command_out);
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <send_frame+0x38>)
 80007ba:	f7ff ff0d 	bl	80005d8 <frames_to_command>
	// Majd kiküldjük az UART-on
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)command_out, 68);
 80007be:	2244      	movs	r2, #68	; 0x44
 80007c0:	490a      	ldr	r1, [pc, #40]	; (80007ec <send_frame+0x38>)
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <send_frame+0x3c>)
 80007c4:	f002 f846 	bl	8002854 <HAL_UART_Transmit_DMA>

	// Hogyha az utolsó frame-nél voltunk
	if (current_frame == frame_number - 1)
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <send_frame+0x40>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1e5a      	subs	r2, r3, #1
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <send_frame+0x44>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d103      	bne.n	80007de <send_frame+0x2a>
		// Akkor ugrunk az első frame-re
		current_frame = 0;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <send_frame+0x44>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
	else
		// Egyébként csak a következőre
		current_frame++;
}
 80007dc:	e004      	b.n	80007e8 <send_frame+0x34>
		current_frame++;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <send_frame+0x44>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <send_frame+0x44>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20004074 	.word	0x20004074
 80007f0:	200040b8 	.word	0x200040b8
 80007f4:	20003f14 	.word	0x20003f14
 80007f8:	20003f1c 	.word	0x20003f1c

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fb18 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f82c 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 f8ea 	bl	80009e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800080c:	f000 f8c0 	bl	8000990 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000810:	f000 f894 	bl	800093c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Elindítjuk a fogadást UART-on keresztül DMA segítségével
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)buffer_in, 68);
 8000814:	2244      	movs	r2, #68	; 0x44
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <main+0x50>)
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <main+0x54>)
 800081a:	f002 f887 	bl	800292c <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Hogyha parancsunk van, amit le kell kezelni
	  if (command_in_to_handle)
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <main+0x58>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d005      	beq.n	8000832 <main+0x36>
	  {
		  // Akkor meghívjuk az erre hivatott függvényt
		  handle_command();
 8000826:	f7ff ff15 	bl	8000654 <handle_command>
		  // És a flag-et reset-eljük
		  command_in_to_handle = false;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <main+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e7f5      	b.n	800081e <main+0x22>
	  }
	  // Hogyha viszont az animáció kész a lejátszásra
	  else if (animation_ready)
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <main+0x5c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f1      	beq.n	800081e <main+0x22>
	  {
		  // Akkor kiküldjük a jelenlegi frame-et
		  send_frame();
 800083a:	f7ff ffbb 	bl	80007b4 <send_frame>
		  // És várunk annyi időt, hogy az a beállított FPS értéknek megfeleljen
		  HAL_Delay(time);
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <main+0x60>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fb68 	bl	8000f18 <HAL_Delay>
	  if (command_in_to_handle)
 8000848:	e7e9      	b.n	800081e <main+0x22>
 800084a:	bf00      	nop
 800084c:	20004030 	.word	0x20004030
 8000850:	200040b8 	.word	0x200040b8
 8000854:	20003f12 	.word	0x20003f12
 8000858:	20003f10 	.word	0x20003f10
 800085c:	20000000 	.word	0x20000000

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	; 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2234      	movs	r2, #52	; 0x34
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f002 ff00 	bl	8003674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <SystemClock_Config+0xd4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <SystemClock_Config+0xd4>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <SystemClock_Config+0xd4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	4b24      	ldr	r3, [pc, #144]	; (8000938 <SystemClock_Config+0xd8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ac:	4a22      	ldr	r2, [pc, #136]	; (8000938 <SystemClock_Config+0xd8>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <SystemClock_Config+0xd8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c8:	2310      	movs	r3, #16
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d4:	2310      	movs	r3, #16
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008de:	2304      	movs	r3, #4
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fcc4 	bl	800227c <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008fa:	f000 f8fd 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f9e2 	bl	8001ce4 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000926:	f000 f8e7 	bl	8000af8 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <MX_USART2_UART_Init+0x50>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART2_UART_Init+0x4c>)
 8000974:	f001 ff20 	bl	80027b8 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800097e:	f000 f8bb 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200040b8 	.word	0x200040b8
 800098c:	40004400 	.word	0x40004400

08000990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_DMA_Init+0x4c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <MX_DMA_Init+0x4c>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <MX_DMA_Init+0x4c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2010      	movs	r0, #16
 80009b8:	f000 fbad 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009bc:	2010      	movs	r0, #16
 80009be:	f000 fbc6 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2011      	movs	r0, #17
 80009c8:	f000 fba5 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009cc:	2011      	movs	r0, #17
 80009ce:	f000 fbbe 	bl	800114e <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a25      	ldr	r2, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a6c:	f001 f920 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_GPIO_Init+0xdc>)
 8000a86:	f000 ff7f 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000aa2:	f000 ff71 	bl	8001988 <HAL_GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	10210000 	.word	0x10210000
 8000abc:	40020800 	.word	0x40020800

08000ac0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	// Callback függvény, ami akkor hívódik meg, ha sikeresen érkezett adat az UART-on

	// A bemeneti buffert gyorsan elmentjük
	strcpy(command_in, buffer_in);
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <HAL_UART_RxCpltCallback+0x28>)
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <HAL_UART_RxCpltCallback+0x2c>)
 8000acc:	f002 fe08 	bl	80036e0 <strcpy>
	// Beállítjuk a flag-et, ami jelzi, hogy érkezett parancs
	command_in_to_handle = true;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <HAL_UART_RxCpltCallback+0x30>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]

	// Majd engedélyezzük a következő üzenet beérkezését is
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)buffer_in, 68);
 8000ad6:	2244      	movs	r2, #68	; 0x44
 8000ad8:	4903      	ldr	r1, [pc, #12]	; (8000ae8 <HAL_UART_RxCpltCallback+0x28>)
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_UART_RxCpltCallback+0x34>)
 8000adc:	f001 ff26 	bl	800292c <HAL_UART_Receive_DMA>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20004030 	.word	0x20004030
 8000aec:	20003f8c 	.word	0x20003f8c
 8000af0:	20003f12 	.word	0x20003f12
 8000af4:	200040b8 	.word	0x200040b8

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b42:	2007      	movs	r0, #7
 8000b44:	f000 fadc 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a4c      	ldr	r2, [pc, #304]	; (8000ca4 <HAL_UART_MspInit+0x150>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	f040 8091 	bne.w	8000c9a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ca8 <HAL_UART_MspInit+0x154>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	4a49      	ldr	r2, [pc, #292]	; (8000ca8 <HAL_UART_MspInit+0x154>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	6413      	str	r3, [r2, #64]	; 0x40
 8000b88:	4b47      	ldr	r3, [pc, #284]	; (8000ca8 <HAL_UART_MspInit+0x154>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <HAL_UART_MspInit+0x154>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a42      	ldr	r2, [pc, #264]	; (8000ca8 <HAL_UART_MspInit+0x154>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <HAL_UART_MspInit+0x154>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4838      	ldr	r0, [pc, #224]	; (8000cac <HAL_UART_MspInit+0x158>)
 8000bcc:	f000 fedc 	bl	8001988 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000bd0:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <HAL_UART_MspInit+0x160>)
 8000bd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000bd6:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bde:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000be0:	2240      	movs	r2, #64	; 0x40
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c0a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c12:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000c14:	f000 fab6 	bl	8001184 <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c1e:	f7ff ff6b 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000c26:	635a      	str	r2, [r3, #52]	; 0x34
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <HAL_UART_MspInit+0x15c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c2e:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c30:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <HAL_UART_MspInit+0x168>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c70:	f000 fa88 	bl	8001184 <HAL_DMA_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000c7a:	f7ff ff3d 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c82:	639a      	str	r2, [r3, #56]	; 0x38
 8000c84:	4a0c      	ldr	r2, [pc, #48]	; (8000cb8 <HAL_UART_MspInit+0x164>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f000 fa41 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c94:	2026      	movs	r0, #38	; 0x26
 8000c96:	f000 fa5a 	bl	800114e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	20003fd0 	.word	0x20003fd0
 8000cb4:	400260a0 	.word	0x400260a0
 8000cb8:	20003f2c 	.word	0x20003f2c
 8000cbc:	40026088 	.word	0x40026088

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f8e4 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA1_Stream5_IRQHandler+0x10>)
 8000d1a:	f000 fbcb 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20003f2c 	.word	0x20003f2c

08000d28 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DMA1_Stream6_IRQHandler+0x10>)
 8000d2e:	f000 fbc1 	bl	80014b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20003fd0 	.word	0x20003fd0

08000d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <USART2_IRQHandler+0x10>)
 8000d42:	f001 fe23 	bl	800298c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200040b8 	.word	0x200040b8

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f002 fc4e 	bl	8003620 <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20003f20 	.word	0x20003f20
 8000db8:	20004110 	.word	0x20004110

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de6:	490e      	ldr	r1, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de8:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dfc:	4c0b      	ldr	r4, [pc, #44]	; (8000e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e0a:	f7ff ffd7 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 fc0d 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fcf3 	bl	80007fc <main>
  bx  lr    
 8000e16:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e24:	08004420 	.word	0x08004420
  ldr r2, =_sbss
 8000e28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e2c:	20004110 	.word	0x20004110

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f94f 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fe4c 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f967 	bl	800116a <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f92f 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000004 	.word	0x20000004
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x24>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_IncTick+0x24>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000000c 	.word	0x2000000c
 8000efc:	200040fc 	.word	0x200040fc

08000f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_GetTick+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200040fc 	.word	0x200040fc

08000f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f20:	f7ff ffee 	bl	8000f00 <HAL_GetTick>
 8000f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d005      	beq.n	8000f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_Delay+0x44>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	bf00      	nop
 8000f40:	f7ff ffde 	bl	8000f00 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f7      	bhi.n	8000f40 <HAL_Delay+0x28>
  {
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000000c 	.word	0x2000000c

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff feb6 	bl	8000f00 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e099      	b.n	80012d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c0:	e00f      	b.n	80011e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c2:	f7ff fe9d 	bl	8000f00 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d908      	bls.n	80011e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e078      	b.n	80012d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e8      	bne.n	80011c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_DMA_Init+0x158>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2b04      	cmp	r3, #4
 800123a:	d107      	bne.n	800124c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4313      	orrs	r3, r2
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f023 0307 	bic.w	r3, r3, #7
 8001262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4313      	orrs	r3, r2
 800126c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2b04      	cmp	r3, #4
 8001274:	d117      	bne.n	80012a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00e      	beq.n	80012a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fb01 	bl	8001890 <DMA_CheckFifoParam>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2240      	movs	r2, #64	; 0x40
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012a2:	2301      	movs	r3, #1
 80012a4:	e016      	b.n	80012d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fab8 	bl	8001824 <DMA_CalcBaseAndBitshift>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	223f      	movs	r2, #63	; 0x3f
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	f010803f 	.word	0xf010803f

080012e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_DMA_Start_IT+0x26>
 8001302:	2302      	movs	r3, #2
 8001304:	e040      	b.n	8001388 <HAL_DMA_Start_IT+0xa8>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d12f      	bne.n	800137a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2202      	movs	r2, #2
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 fa4a 	bl	80017c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	223f      	movs	r2, #63	; 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0216 	orr.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0208 	orr.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e005      	b.n	8001386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001382:	2302      	movs	r3, #2
 8001384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800139e:	f7ff fdaf 	bl	8000f00 <HAL_GetTick>
 80013a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e052      	b.n	8001468 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0216 	bic.w	r2, r2, #22
 80013d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d103      	bne.n	80013f2 <HAL_DMA_Abort+0x62>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0208 	bic.w	r2, r2, #8
 8001400:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	e013      	b.n	800143c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001414:	f7ff fd74 	bl	8000f00 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b05      	cmp	r3, #5
 8001420:	d90c      	bls.n	800143c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2220      	movs	r2, #32
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e015      	b.n	8001468 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1e4      	bne.n	8001414 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144e:	223f      	movs	r2, #63	; 0x3f
 8001450:	409a      	lsls	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d004      	beq.n	800148e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00c      	b.n	80014a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0201 	bic.w	r2, r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014c0:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_DMA_IRQHandler+0x258>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a92      	ldr	r2, [pc, #584]	; (8001710 <HAL_DMA_IRQHandler+0x25c>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014de:	2208      	movs	r2, #8
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01a      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0204 	bic.w	r2, r2, #4
 8001506:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	2208      	movs	r2, #8
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2201      	movs	r2, #1
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00b      	beq.n	8001556 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2201      	movs	r2, #1
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f043 0202 	orr.w	r2, r3, #2
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155a:	2204      	movs	r2, #4
 800155c:	409a      	lsls	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d012      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001578:	2204      	movs	r2, #4
 800157a:	409a      	lsls	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f043 0204 	orr.w	r2, r3, #4
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2210      	movs	r2, #16
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d043      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d03c      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ae:	2210      	movs	r2, #16
 80015b0:	409a      	lsls	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d018      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d024      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
 80015e2:	e01f      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01b      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e016      	b.n	8001624 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0208 	bic.w	r2, r2, #8
 8001612:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2220      	movs	r2, #32
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 808e 	beq.w	8001752 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 8086 	beq.w	8001752 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2220      	movs	r2, #32
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b05      	cmp	r3, #5
 800165c:	d136      	bne.n	80016cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0216 	bic.w	r2, r2, #22
 800166c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800167c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <HAL_DMA_IRQHandler+0x1da>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0208 	bic.w	r2, r2, #8
 800169c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	223f      	movs	r2, #63	; 0x3f
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d07d      	beq.n	80017be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
        }
        return;
 80016ca:	e078      	b.n	80017be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d01c      	beq.n	8001714 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d108      	bne.n	80016fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d030      	beq.n	8001752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e02b      	b.n	8001752 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d027      	beq.n	8001752 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
 800170a:	e022      	b.n	8001752 <HAL_DMA_IRQHandler+0x29e>
 800170c:	20000004 	.word	0x20000004
 8001710:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10f      	bne.n	8001742 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0210 	bic.w	r2, r2, #16
 8001730:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	2b00      	cmp	r3, #0
 8001758:	d032      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d022      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2205      	movs	r2, #5
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3301      	adds	r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	429a      	cmp	r2, r3
 8001788:	d307      	bcc.n	800179a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f2      	bne.n	800177e <HAL_DMA_IRQHandler+0x2ca>
 8001798:	e000      	b.n	800179c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800179a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	4798      	blx	r3
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017be:	bf00      	nop
    }
  }
}
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop

080017c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b40      	cmp	r3, #64	; 0x40
 80017f4:	d108      	bne.n	8001808 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001806:	e007      	b.n	8001818 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	3b10      	subs	r3, #16
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <DMA_CalcBaseAndBitshift+0x64>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <DMA_CalcBaseAndBitshift+0x68>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d909      	bls.n	8001866 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	1d1a      	adds	r2, r3, #4
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	659a      	str	r2, [r3, #88]	; 0x58
 8001864:	e007      	b.n	8001876 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800187a:	4618      	mov	r0, r3
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab
 800188c:	08004288 	.word	0x08004288

08001890 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11f      	bne.n	80018ea <DMA_CheckFifoParam+0x5a>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d856      	bhi.n	800195e <DMA_CheckFifoParam+0xce>
 80018b0:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <DMA_CheckFifoParam+0x28>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	080018db 	.word	0x080018db
 80018c0:	080018c9 	.word	0x080018c9
 80018c4:	0800195f 	.word	0x0800195f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d046      	beq.n	8001962 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d8:	e043      	b.n	8001962 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018e2:	d140      	bne.n	8001966 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e8:	e03d      	b.n	8001966 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f2:	d121      	bne.n	8001938 <DMA_CheckFifoParam+0xa8>
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d837      	bhi.n	800196a <DMA_CheckFifoParam+0xda>
 80018fa:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <DMA_CheckFifoParam+0x70>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	08001911 	.word	0x08001911
 8001904:	08001917 	.word	0x08001917
 8001908:	08001911 	.word	0x08001911
 800190c:	08001929 	.word	0x08001929
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      break;
 8001914:	e030      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d025      	beq.n	800196e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001926:	e022      	b.n	800196e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001930:	d11f      	bne.n	8001972 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001936:	e01c      	b.n	8001972 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d903      	bls.n	8001946 <DMA_CheckFifoParam+0xb6>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d003      	beq.n	800194c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001944:	e018      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
      break;
 800194a:	e015      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00e      	beq.n	8001976 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      break;
 800195c:	e00b      	b.n	8001976 <DMA_CheckFifoParam+0xe6>
      break;
 800195e:	bf00      	nop
 8001960:	e00a      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
 8001964:	e008      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 8001966:	bf00      	nop
 8001968:	e006      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 800196a:	bf00      	nop
 800196c:	e004      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 800196e:	bf00      	nop
 8001970:	e002      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;   
 8001972:	bf00      	nop
 8001974:	e000      	b.n	8001978 <DMA_CheckFifoParam+0xe8>
      break;
 8001976:	bf00      	nop
    }
  } 
  
  return status; 
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	; 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e165      	b.n	8001c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8154 	bne.w	8001c6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80ae 	beq.w	8001c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b5d      	ldr	r3, [pc, #372]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a5c      	ldr	r2, [pc, #368]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <HAL_GPIO_Init+0x300>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4f      	ldr	r2, [pc, #316]	; (8001c90 <HAL_GPIO_Init+0x308>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x21a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4e      	ldr	r2, [pc, #312]	; (8001c94 <HAL_GPIO_Init+0x30c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x216>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4d      	ldr	r2, [pc, #308]	; (8001c98 <HAL_GPIO_Init+0x310>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x212>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4c      	ldr	r2, [pc, #304]	; (8001c9c <HAL_GPIO_Init+0x314>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x20e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4b      	ldr	r2, [pc, #300]	; (8001ca0 <HAL_GPIO_Init+0x318>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x20a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <HAL_GPIO_Init+0x31c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x206>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_GPIO_Init+0x320>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x202>
 8001b86:	2306      	movs	r3, #6
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x21c>
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x21c>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x21c>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x21c>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x21c>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x21c>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x21c>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x304>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be6:	4a31      	ldr	r2, [pc, #196]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c10:	4a26      	ldr	r2, [pc, #152]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <HAL_GPIO_Init+0x324>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae96 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e0cc      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b68      	ldr	r3, [pc, #416]	; (8001e9c <HAL_RCC_ClockConfig+0x1b8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d90c      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b65      	ldr	r3, [pc, #404]	; (8001e9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b63      	ldr	r3, [pc, #396]	; (8001e9c <HAL_RCC_ClockConfig+0x1b8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e0b8      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d020      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d50:	4b53      	ldr	r3, [pc, #332]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	494d      	ldr	r1, [pc, #308]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d044      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d119      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e07f      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da2:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e06f      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e067      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc2:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f023 0203 	bic.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4934      	ldr	r1, [pc, #208]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd4:	f7ff f894 	bl	8000f00 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7ff f890 	bl	8000f00 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e04f      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 020c 	and.w	r2, r3, #12
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d1eb      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_RCC_ClockConfig+0x1b8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d20c      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e032      	b.n	8001e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e38:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4916      	ldr	r1, [pc, #88]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	490e      	ldr	r1, [pc, #56]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e6a:	f000 f855 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	490a      	ldr	r1, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	5ccb      	ldrb	r3, [r1, r3]
 8001e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_RCC_ClockConfig+0x1c8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fff4 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	08004270 	.word	0x08004270
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08004280 	.word	0x08004280

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffdc 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0b5b      	lsrs	r3, r3, #13
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4903      	ldr	r1, [pc, #12]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	08004280 	.word	0x08004280

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f34:	4bce      	ldr	r3, [pc, #824]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	f200 818d 	bhi.w	800225c <HAL_RCC_GetSysClockFreq+0x344>
 8001f42:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f48:	08001f7d 	.word	0x08001f7d
 8001f4c:	0800225d 	.word	0x0800225d
 8001f50:	0800225d 	.word	0x0800225d
 8001f54:	0800225d 	.word	0x0800225d
 8001f58:	08001f83 	.word	0x08001f83
 8001f5c:	0800225d 	.word	0x0800225d
 8001f60:	0800225d 	.word	0x0800225d
 8001f64:	0800225d 	.word	0x0800225d
 8001f68:	08001f89 	.word	0x08001f89
 8001f6c:	0800225d 	.word	0x0800225d
 8001f70:	0800225d 	.word	0x0800225d
 8001f74:	0800225d 	.word	0x0800225d
 8001f78:	080020fd 	.word	0x080020fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4bbd      	ldr	r3, [pc, #756]	; (8002274 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f7e:	61bb      	str	r3, [r7, #24]
       break;
 8001f80:	e16f      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f82:	4bbd      	ldr	r3, [pc, #756]	; (8002278 <HAL_RCC_GetSysClockFreq+0x360>)
 8001f84:	61bb      	str	r3, [r7, #24]
      break;
 8001f86:	e16c      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f88:	4bb9      	ldr	r3, [pc, #740]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f90:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f92:	4bb7      	ldr	r3, [pc, #732]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d053      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9e:	4bb4      	ldr	r3, [pc, #720]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	099b      	lsrs	r3, r3, #6
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	ea02 0400 	and.w	r4, r2, r0
 8001fb6:	603c      	str	r4, [r7, #0]
 8001fb8:	400b      	ands	r3, r1
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	014b      	lsls	r3, r1, #5
 8001fce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd2:	0142      	lsls	r2, r0, #5
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4623      	mov	r3, r4
 8001fda:	1ac0      	subs	r0, r0, r3
 8001fdc:	462b      	mov	r3, r5
 8001fde:	eb61 0103 	sbc.w	r1, r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	018b      	lsls	r3, r1, #6
 8001fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ff0:	0182      	lsls	r2, r0, #6
 8001ff2:	1a12      	subs	r2, r2, r0
 8001ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff8:	f04f 0000 	mov.w	r0, #0
 8001ffc:	f04f 0100 	mov.w	r1, #0
 8002000:	00d9      	lsls	r1, r3, #3
 8002002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002006:	00d0      	lsls	r0, r2, #3
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4621      	mov	r1, r4
 800200e:	1852      	adds	r2, r2, r1
 8002010:	4629      	mov	r1, r5
 8002012:	eb43 0101 	adc.w	r1, r3, r1
 8002016:	460b      	mov	r3, r1
 8002018:	f04f 0000 	mov.w	r0, #0
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	0259      	lsls	r1, r3, #9
 8002022:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002026:	0250      	lsls	r0, r2, #9
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	461a      	mov	r2, r3
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	f7fe f952 	bl	80002e0 <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4613      	mov	r3, r2
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	e04c      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002046:	4b8a      	ldr	r3, [pc, #552]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	461a      	mov	r2, r3
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	ea02 0a00 	and.w	sl, r2, r0
 800205e:	ea03 0b01 	and.w	fp, r3, r1
 8002062:	4650      	mov	r0, sl
 8002064:	4659      	mov	r1, fp
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	014b      	lsls	r3, r1, #5
 8002070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002074:	0142      	lsls	r2, r0, #5
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	ebb0 000a 	subs.w	r0, r0, sl
 800207e:	eb61 010b 	sbc.w	r1, r1, fp
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	018b      	lsls	r3, r1, #6
 800208c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002090:	0182      	lsls	r2, r0, #6
 8002092:	1a12      	subs	r2, r2, r0
 8002094:	eb63 0301 	sbc.w	r3, r3, r1
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	00d9      	lsls	r1, r3, #3
 80020a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a6:	00d0      	lsls	r0, r2, #3
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	eb12 020a 	adds.w	r2, r2, sl
 80020b0:	eb43 030b 	adc.w	r3, r3, fp
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	0299      	lsls	r1, r3, #10
 80020be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020c2:	0290      	lsls	r0, r2, #10
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	f7fe f904 	bl	80002e0 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4613      	mov	r3, r2
 80020de:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e0:	4b63      	ldr	r3, [pc, #396]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	61bb      	str	r3, [r7, #24]
      break;
 80020fa:	e0b2      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020fc:	4b5c      	ldr	r3, [pc, #368]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002104:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002106:	4b5a      	ldr	r3, [pc, #360]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d04d      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002112:	4b57      	ldr	r3, [pc, #348]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	461a      	mov	r2, r3
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	ea02 0800 	and.w	r8, r2, r0
 800212a:	ea03 0901 	and.w	r9, r3, r1
 800212e:	4640      	mov	r0, r8
 8002130:	4649      	mov	r1, r9
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	014b      	lsls	r3, r1, #5
 800213c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002140:	0142      	lsls	r2, r0, #5
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	ebb0 0008 	subs.w	r0, r0, r8
 800214a:	eb61 0109 	sbc.w	r1, r1, r9
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	018b      	lsls	r3, r1, #6
 8002158:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800215c:	0182      	lsls	r2, r0, #6
 800215e:	1a12      	subs	r2, r2, r0
 8002160:	eb63 0301 	sbc.w	r3, r3, r1
 8002164:	f04f 0000 	mov.w	r0, #0
 8002168:	f04f 0100 	mov.w	r1, #0
 800216c:	00d9      	lsls	r1, r3, #3
 800216e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002172:	00d0      	lsls	r0, r2, #3
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	eb12 0208 	adds.w	r2, r2, r8
 800217c:	eb43 0309 	adc.w	r3, r3, r9
 8002180:	f04f 0000 	mov.w	r0, #0
 8002184:	f04f 0100 	mov.w	r1, #0
 8002188:	0259      	lsls	r1, r3, #9
 800218a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800218e:	0250      	lsls	r0, r2, #9
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	461a      	mov	r2, r3
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	f7fe f89e 	bl	80002e0 <__aeabi_uldivmod>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4613      	mov	r3, r2
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e04a      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	461a      	mov	r2, r3
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	ea02 0400 	and.w	r4, r2, r0
 80021c6:	ea03 0501 	and.w	r5, r3, r1
 80021ca:	4620      	mov	r0, r4
 80021cc:	4629      	mov	r1, r5
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	014b      	lsls	r3, r1, #5
 80021d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021dc:	0142      	lsls	r2, r0, #5
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	1b00      	subs	r0, r0, r4
 80021e4:	eb61 0105 	sbc.w	r1, r1, r5
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	018b      	lsls	r3, r1, #6
 80021f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021f6:	0182      	lsls	r2, r0, #6
 80021f8:	1a12      	subs	r2, r2, r0
 80021fa:	eb63 0301 	sbc.w	r3, r3, r1
 80021fe:	f04f 0000 	mov.w	r0, #0
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	00d9      	lsls	r1, r3, #3
 8002208:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800220c:	00d0      	lsls	r0, r2, #3
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	1912      	adds	r2, r2, r4
 8002214:	eb45 0303 	adc.w	r3, r5, r3
 8002218:	f04f 0000 	mov.w	r0, #0
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	0299      	lsls	r1, r3, #10
 8002222:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002226:	0290      	lsls	r0, r2, #10
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	461a      	mov	r2, r3
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f7fe f852 	bl	80002e0 <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4613      	mov	r3, r2
 8002242:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_RCC_GetSysClockFreq+0x358>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0f1b      	lsrs	r3, r3, #28
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002250:	69fa      	ldr	r2, [r7, #28]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	61bb      	str	r3, [r7, #24]
      break;
 800225a:	e002      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_GetSysClockFreq+0x35c>)
 800225e:	61bb      	str	r3, [r7, #24]
      break;
 8002260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002262:	69bb      	ldr	r3, [r7, #24]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3720      	adds	r7, #32
 8002268:	46bd      	mov	sp, r7
 800226a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	00f42400 	.word	0x00f42400
 8002278:	007a1200 	.word	0x007a1200

0800227c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e28d      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8083 	beq.w	80023a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800229c:	4b94      	ldr	r3, [pc, #592]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d019      	beq.n	80022dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022a8:	4b91      	ldr	r3, [pc, #580]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022b4:	4b8e      	ldr	r3, [pc, #568]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d112      	bne.n	80022f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b84      	ldr	r3, [pc, #528]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x124>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e25a      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x90>
 80022fe:	4b7c      	ldr	r3, [pc, #496]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7b      	ldr	r2, [pc, #492]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xcc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0xb4>
 8002316:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a75      	ldr	r2, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a72      	ldr	r2, [pc, #456]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xcc>
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6e      	ldr	r2, [pc, #440]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b6c      	ldr	r3, [pc, #432]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6b      	ldr	r2, [pc, #428]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe fdd6 	bl	8000f00 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe fdd2 	bl	8000f00 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e21f      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b61      	ldr	r3, [pc, #388]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xdc>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fdc2 	bl	8000f00 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fdbe 	bl	8000f00 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e20b      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x104>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06f      	beq.n	800248e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023ae:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d017      	beq.n	80023ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x186>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1d3      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4937      	ldr	r1, [pc, #220]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_OscConfig+0x278>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fd6b 	bl	8000f00 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe fd67 	bl	8000f00 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1b4      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4925      	ldr	r1, [pc, #148]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x278>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fd4a 	bl	8000f00 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe fd46 	bl	8000f00 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e193      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d036      	beq.n	8002508 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d016      	beq.n	80024d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7fe fd2a 	bl	8000f00 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fd26 	bl	8000f00 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e173      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x234>
 80024ce:	e01b      	b.n	8002508 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_OscConfig+0x27c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fd13 	bl	8000f00 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	e00e      	b.n	80024fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe fd0f 	bl	8000f00 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d907      	bls.n	80024fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e15c      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	42470000 	.word	0x42470000
 80024f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	4b8a      	ldr	r3, [pc, #552]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80024fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ea      	bne.n	80024de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8097 	beq.w	8002644 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b83      	ldr	r3, [pc, #524]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a7e      	ldr	r2, [pc, #504]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_RCC_OscConfig+0x4b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x4b0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a75      	ldr	r2, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x4b0>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7fe fccf 	bl	8000f00 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe fccb 	bl	8000f00 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e118      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b6c      	ldr	r3, [pc, #432]	; (800272c <HAL_RCC_OscConfig+0x4b0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x31e>
 800258c:	4b66      	ldr	r3, [pc, #408]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a65      	ldr	r2, [pc, #404]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	e01c      	b.n	80025d4 <HAL_RCC_OscConfig+0x358>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x340>
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a60      	ldr	r2, [pc, #384]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0x358>
 80025bc:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a59      	ldr	r2, [pc, #356]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe fc90 	bl	8000f00 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7fe fc8c 	bl	8000f00 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0d7      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ee      	beq.n	80025e4 <HAL_RCC_OscConfig+0x368>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe fc7a 	bl	8000f00 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7fe fc76 	bl	8000f00 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0c1      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	4b40      	ldr	r3, [pc, #256]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ee      	bne.n	8002610 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80ad 	beq.w	80027a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d060      	beq.n	800271c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d145      	bne.n	80026ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_RCC_OscConfig+0x4b4>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fc4a 	bl	8000f00 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fc46 	bl	8000f00 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e093      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	491b      	ldr	r1, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4b4>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fc1b 	bl	8000f00 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fc17 	bl	8000f00 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e064      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x452>
 80026ec:	e05c      	b.n	80027a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x4b4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fc04 	bl	8000f00 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fc00 	bl	8000f00 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04d      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x480>
 800271a:	e045      	b.n	80027a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e040      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000
 8002730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_RCC_OscConfig+0x538>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d030      	beq.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d129      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d122      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d119      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d10f      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e03f      	b.n	800284a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe f9b8 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fd47 	bl	8003290 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	d153      	bne.n	8002916 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_UART_Transmit_DMA+0x26>
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e04c      	b.n	8002918 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_UART_Transmit_DMA+0x38>
 8002888:	2302      	movs	r3, #2
 800288a:	e045      	b.n	8002918 <HAL_UART_Transmit_DMA+0xc4>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	88fa      	ldrh	r2, [r7, #6]
 80028a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2221      	movs	r2, #33	; 0x21
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_UART_Transmit_DMA+0xcc>)
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_UART_Transmit_DMA+0xd0>)
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c8:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_UART_Transmit_DMA+0xd4>)
 80028ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	2200      	movs	r2, #0
 80028d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80028d4:	f107 0308 	add.w	r3, r7, #8
 80028d8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3304      	adds	r3, #4
 80028e8:	461a      	mov	r2, r3
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	f7fe fcf8 	bl	80012e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002910:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	08002d4d 	.word	0x08002d4d
 8002924:	08002d9f 	.word	0x08002d9f
 8002928:	08002e87 	.word	0x08002e87

0800292c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b20      	cmp	r3, #32
 8002944:	d11d      	bne.n	8002982 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_UART_Receive_DMA+0x26>
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e016      	b.n	8002984 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_UART_Receive_DMA+0x38>
 8002960:	2302      	movs	r3, #2
 8002962:	e00f      	b.n	8002984 <HAL_UART_Receive_DMA+0x58>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	461a      	mov	r2, r3
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 facf 	bl	8002f1c <UART_Start_Receive_DMA>
 800297e:	4603      	mov	r3, r0
 8002980:	e000      	b.n	8002984 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
  }
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_UART_IRQHandler+0x52>
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fbc3 	bl	8003162 <UART_Receive_IT>
      return;
 80029dc:	e17c      	b.n	8002cd8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80b1 	beq.w	8002b48 <HAL_UART_IRQHandler+0x1bc>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_UART_IRQHandler+0x70>
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80a6 	beq.w	8002b48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_UART_IRQHandler+0x90>
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_UART_IRQHandler+0xb0>
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0202 	orr.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_UART_IRQHandler+0xd0>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00f      	beq.n	8002a86 <HAL_UART_IRQHandler+0xfa>
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	f003 0320 	and.w	r3, r3, #32
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <HAL_UART_IRQHandler+0xee>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0208 	orr.w	r2, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 811f 	beq.w	8002cce <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_UART_IRQHandler+0x11e>
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fb5c 	bl	8003162 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x146>
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d031      	beq.n	8002b36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa9c 	bl	8003010 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d123      	bne.n	8002b2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d013      	beq.n	8002b26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	4a77      	ldr	r2, [pc, #476]	; (8002ce0 <HAL_UART_IRQHandler+0x354>)
 8002b04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fcb0 	bl	8001470 <HAL_DMA_Abort_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b20:	4610      	mov	r0, r2
 8002b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e00e      	b.n	8002b44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8fa 	bl	8002d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	e00a      	b.n	8002b44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8f6 	bl	8002d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b34:	e006      	b.n	8002b44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8f2 	bl	8002d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b42:	e0c4      	b.n	8002cce <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	bf00      	nop
    return;
 8002b46:	e0c2      	b.n	8002cce <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f040 80a2 	bne.w	8002c96 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 809c 	beq.w	8002c96 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8096 	beq.w	8002c96 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d14f      	bne.n	8002c2e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002b98:	8a3b      	ldrh	r3, [r7, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8099 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ba4:	8a3a      	ldrh	r2, [r7, #16]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	f080 8093 	bcs.w	8002cd2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8a3a      	ldrh	r2, [r7, #16]
 8002bb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbc:	d02b      	beq.n	8002c16 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bcc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bec:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0210 	bic.w	r2, r2, #16
 8002c0a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fbbd 	bl	8001390 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f884 	bl	8002d34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c2c:	e051      	b.n	8002cd2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d047      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002c46:	8a7b      	ldrh	r3, [r7, #18]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d044      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c5a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0210 	bic.w	r2, r2, #16
 8002c88:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c8a:	8a7b      	ldrh	r3, [r7, #18]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f850 	bl	8002d34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c94:	e01f      	b.n	8002cd6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x326>
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f9f1 	bl	8003092 <UART_Transmit_IT>
    return;
 8002cb0:	e012      	b.n	8002cd8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x34c>
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa33 	bl	8003132 <UART_EndTransmit_IT>
    return;
 8002ccc:	e004      	b.n	8002cd8 <HAL_UART_IRQHandler+0x34c>
    return;
 8002cce:	bf00      	nop
 8002cd0:	e002      	b.n	8002cd8 <HAL_UART_IRQHandler+0x34c>
      return;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HAL_UART_IRQHandler+0x34c>
      return;
 8002cd6:	bf00      	nop
  }
}
 8002cd8:	3728      	adds	r7, #40	; 0x28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	0800306b 	.word	0x0800306b

08002ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d113      	bne.n	8002d90 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d7c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d8e:	e002      	b.n	8002d96 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff ffa7 	bl	8002ce4 <HAL_UART_TxCpltCallback>
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff ffa3 	bl	8002cf8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d12a      	bne.n	8002e2c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dea:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0210 	bic.w	r2, r2, #16
 8002e2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d106      	bne.n	8002e42 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e38:	4619      	mov	r1, r3
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7ff ff7a 	bl	8002d34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e40:	e002      	b.n	8002e48 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7fd fe3c 	bl	8000ac0 <HAL_UART_RxCpltCallback>
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d108      	bne.n	8002e78 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e6a:	085b      	lsrs	r3, r3, #1
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff ff5f 	bl	8002d34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e76:	e002      	b.n	8002e7e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ff47 	bl	8002d0c <HAL_UART_RxHalfCpltCallback>
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2301      	moveq	r3, #1
 8002ea8:	2300      	movne	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b21      	cmp	r3, #33	; 0x21
 8002eb8:	d108      	bne.n	8002ecc <UART_DMAError+0x46>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ec6:	68b8      	ldr	r0, [r7, #8]
 8002ec8:	f000 f88c 	bl	8002fe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b22      	cmp	r3, #34	; 0x22
 8002eec:	d108      	bne.n	8002f00 <UART_DMAError+0x7a>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002efa:	68b8      	ldr	r0, [r7, #8]
 8002efc:	f000 f888 	bl	8003010 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f0c:	68b8      	ldr	r0, [r7, #8]
 8002f0e:	f7ff ff07 	bl	8002d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2222      	movs	r2, #34	; 0x22
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <UART_Start_Receive_DMA+0xbc>)
 8002f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <UART_Start_Receive_DMA+0xc0>)
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <UART_Start_Receive_DMA+0xc4>)
 8002f5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	2200      	movs	r2, #0
 8002f62:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	f7fe f9b0 	bl	80012e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695a      	ldr	r2, [r3, #20]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fcc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	08002dbb 	.word	0x08002dbb
 8002fdc:	08002e51 	.word	0x08002e51
 8002fe0:	08002e87 	.word	0x08002e87

08002fe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ffa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003026:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0210 	bic.w	r2, r2, #16
 800304e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f7ff fe4b 	bl	8002d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b21      	cmp	r3, #33	; 0x21
 80030a4:	d13e      	bne.n	8003124 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ae:	d114      	bne.n	80030da <UART_Transmit_IT+0x48>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d110      	bne.n	80030da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	621a      	str	r2, [r3, #32]
 80030d8:	e008      	b.n	80030ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6211      	str	r1, [r2, #32]
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4619      	mov	r1, r3
 80030fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10f      	bne.n	8003120 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003148:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fdc6 	bl	8002ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b22      	cmp	r3, #34	; 0x22
 8003174:	f040 8087 	bne.w	8003286 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d117      	bne.n	80031b2 <UART_Receive_IT+0x50>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
 80031b0:	e026      	b.n	8003200 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d007      	beq.n	80031d6 <UART_Receive_IT+0x74>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <UART_Receive_IT+0x82>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e008      	b.n	80031f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4619      	mov	r1, r3
 800320e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003210:	2b00      	cmp	r3, #0
 8003212:	d136      	bne.n	8003282 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0220 	bic.w	r2, r2, #32
 8003222:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003232:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	2b01      	cmp	r3, #1
 8003252:	d10e      	bne.n	8003272 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0210 	bic.w	r2, r2, #16
 8003262:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003268:	4619      	mov	r1, r3
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fd62 	bl	8002d34 <HAL_UARTEx_RxEventCallback>
 8003270:	e002      	b.n	8003278 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd fc24 	bl	8000ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	e002      	b.n	8003288 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
  }
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003294:	b09f      	sub	sp, #124	; 0x7c
 8003296:	af00      	add	r7, sp, #0
 8003298:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800329a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	68d9      	ldr	r1, [r3, #12]
 80032a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	ea40 0301 	orr.w	r3, r0, r1
 80032b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032d4:	f021 010c 	bic.w	r1, r1, #12
 80032d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032de:	430b      	orrs	r3, r1
 80032e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ee:	6999      	ldr	r1, [r3, #24]
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	ea40 0301 	orr.w	r3, r0, r1
 80032f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4bc5      	ldr	r3, [pc, #788]	; (8003614 <UART_SetConfig+0x384>)
 8003300:	429a      	cmp	r2, r3
 8003302:	d004      	beq.n	800330e <UART_SetConfig+0x7e>
 8003304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4bc3      	ldr	r3, [pc, #780]	; (8003618 <UART_SetConfig+0x388>)
 800330a:	429a      	cmp	r2, r3
 800330c:	d103      	bne.n	8003316 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800330e:	f7fe fdef 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8003312:	6778      	str	r0, [r7, #116]	; 0x74
 8003314:	e002      	b.n	800331c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7fe fdd7 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 800331a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800331c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003324:	f040 80b6 	bne.w	8003494 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332a:	461c      	mov	r4, r3
 800332c:	f04f 0500 	mov.w	r5, #0
 8003330:	4622      	mov	r2, r4
 8003332:	462b      	mov	r3, r5
 8003334:	1891      	adds	r1, r2, r2
 8003336:	6439      	str	r1, [r7, #64]	; 0x40
 8003338:	415b      	adcs	r3, r3
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
 800333c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003340:	1912      	adds	r2, r2, r4
 8003342:	eb45 0303 	adc.w	r3, r5, r3
 8003346:	f04f 0000 	mov.w	r0, #0
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	00d9      	lsls	r1, r3, #3
 8003350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003354:	00d0      	lsls	r0, r2, #3
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	1911      	adds	r1, r2, r4
 800335c:	6639      	str	r1, [r7, #96]	; 0x60
 800335e:	416b      	adcs	r3, r5
 8003360:	667b      	str	r3, [r7, #100]	; 0x64
 8003362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	1891      	adds	r1, r2, r2
 800336e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003370:	415b      	adcs	r3, r3
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003378:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800337c:	f7fc ffb0 	bl	80002e0 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4ba5      	ldr	r3, [pc, #660]	; (800361c <UART_SetConfig+0x38c>)
 8003386:	fba3 2302 	umull	r2, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	011e      	lsls	r6, r3, #4
 800338e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003390:	461c      	mov	r4, r3
 8003392:	f04f 0500 	mov.w	r5, #0
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	1891      	adds	r1, r2, r2
 800339c:	6339      	str	r1, [r7, #48]	; 0x30
 800339e:	415b      	adcs	r3, r3
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
 80033a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033a6:	1912      	adds	r2, r2, r4
 80033a8:	eb45 0303 	adc.w	r3, r5, r3
 80033ac:	f04f 0000 	mov.w	r0, #0
 80033b0:	f04f 0100 	mov.w	r1, #0
 80033b4:	00d9      	lsls	r1, r3, #3
 80033b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ba:	00d0      	lsls	r0, r2, #3
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	1911      	adds	r1, r2, r4
 80033c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80033c4:	416b      	adcs	r3, r5
 80033c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	461a      	mov	r2, r3
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	1891      	adds	r1, r2, r2
 80033d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80033d6:	415b      	adcs	r3, r3
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033e2:	f7fc ff7d 	bl	80002e0 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4b8c      	ldr	r3, [pc, #560]	; (800361c <UART_SetConfig+0x38c>)
 80033ec:	fba3 1302 	umull	r1, r3, r3, r2
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	2164      	movs	r1, #100	; 0x64
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	3332      	adds	r3, #50	; 0x32
 80033fe:	4a87      	ldr	r2, [pc, #540]	; (800361c <UART_SetConfig+0x38c>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800340c:	441e      	add	r6, r3
 800340e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003410:	4618      	mov	r0, r3
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	1894      	adds	r4, r2, r2
 800341c:	623c      	str	r4, [r7, #32]
 800341e:	415b      	adcs	r3, r3
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003426:	1812      	adds	r2, r2, r0
 8003428:	eb41 0303 	adc.w	r3, r1, r3
 800342c:	f04f 0400 	mov.w	r4, #0
 8003430:	f04f 0500 	mov.w	r5, #0
 8003434:	00dd      	lsls	r5, r3, #3
 8003436:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800343a:	00d4      	lsls	r4, r2, #3
 800343c:	4622      	mov	r2, r4
 800343e:	462b      	mov	r3, r5
 8003440:	1814      	adds	r4, r2, r0
 8003442:	653c      	str	r4, [r7, #80]	; 0x50
 8003444:	414b      	adcs	r3, r1
 8003446:	657b      	str	r3, [r7, #84]	; 0x54
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	461a      	mov	r2, r3
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	1891      	adds	r1, r2, r2
 8003454:	61b9      	str	r1, [r7, #24]
 8003456:	415b      	adcs	r3, r3
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800345e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003462:	f7fc ff3d 	bl	80002e0 <__aeabi_uldivmod>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4b6c      	ldr	r3, [pc, #432]	; (800361c <UART_SetConfig+0x38c>)
 800346c:	fba3 1302 	umull	r1, r3, r3, r2
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	2164      	movs	r1, #100	; 0x64
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	3332      	adds	r3, #50	; 0x32
 800347e:	4a67      	ldr	r2, [pc, #412]	; (800361c <UART_SetConfig+0x38c>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	f003 0207 	and.w	r2, r3, #7
 800348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4432      	add	r2, r6
 8003490:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003492:	e0b9      	b.n	8003608 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003496:	461c      	mov	r4, r3
 8003498:	f04f 0500 	mov.w	r5, #0
 800349c:	4622      	mov	r2, r4
 800349e:	462b      	mov	r3, r5
 80034a0:	1891      	adds	r1, r2, r2
 80034a2:	6139      	str	r1, [r7, #16]
 80034a4:	415b      	adcs	r3, r3
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034ac:	1912      	adds	r2, r2, r4
 80034ae:	eb45 0303 	adc.w	r3, r5, r3
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	00d9      	lsls	r1, r3, #3
 80034bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034c0:	00d0      	lsls	r0, r2, #3
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	eb12 0804 	adds.w	r8, r2, r4
 80034ca:	eb43 0905 	adc.w	r9, r3, r5
 80034ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	008b      	lsls	r3, r1, #2
 80034e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034e6:	0082      	lsls	r2, r0, #2
 80034e8:	4640      	mov	r0, r8
 80034ea:	4649      	mov	r1, r9
 80034ec:	f7fc fef8 	bl	80002e0 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4b49      	ldr	r3, [pc, #292]	; (800361c <UART_SetConfig+0x38c>)
 80034f6:	fba3 2302 	umull	r2, r3, r3, r2
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	011e      	lsls	r6, r3, #4
 80034fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003500:	4618      	mov	r0, r3
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	1894      	adds	r4, r2, r2
 800350c:	60bc      	str	r4, [r7, #8]
 800350e:	415b      	adcs	r3, r3
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003516:	1812      	adds	r2, r2, r0
 8003518:	eb41 0303 	adc.w	r3, r1, r3
 800351c:	f04f 0400 	mov.w	r4, #0
 8003520:	f04f 0500 	mov.w	r5, #0
 8003524:	00dd      	lsls	r5, r3, #3
 8003526:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800352a:	00d4      	lsls	r4, r2, #3
 800352c:	4622      	mov	r2, r4
 800352e:	462b      	mov	r3, r5
 8003530:	1814      	adds	r4, r2, r0
 8003532:	64bc      	str	r4, [r7, #72]	; 0x48
 8003534:	414b      	adcs	r3, r1
 8003536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	008b      	lsls	r3, r1, #2
 800354c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003550:	0082      	lsls	r2, r0, #2
 8003552:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003556:	f7fc fec3 	bl	80002e0 <__aeabi_uldivmod>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4b2f      	ldr	r3, [pc, #188]	; (800361c <UART_SetConfig+0x38c>)
 8003560:	fba3 1302 	umull	r1, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	2164      	movs	r1, #100	; 0x64
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	3332      	adds	r3, #50	; 0x32
 8003572:	4a2a      	ldr	r2, [pc, #168]	; (800361c <UART_SetConfig+0x38c>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357e:	441e      	add	r6, r3
 8003580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003582:	4618      	mov	r0, r3
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	1894      	adds	r4, r2, r2
 800358e:	603c      	str	r4, [r7, #0]
 8003590:	415b      	adcs	r3, r3
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003598:	1812      	adds	r2, r2, r0
 800359a:	eb41 0303 	adc.w	r3, r1, r3
 800359e:	f04f 0400 	mov.w	r4, #0
 80035a2:	f04f 0500 	mov.w	r5, #0
 80035a6:	00dd      	lsls	r5, r3, #3
 80035a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035ac:	00d4      	lsls	r4, r2, #3
 80035ae:	4622      	mov	r2, r4
 80035b0:	462b      	mov	r3, r5
 80035b2:	eb12 0a00 	adds.w	sl, r2, r0
 80035b6:	eb43 0b01 	adc.w	fp, r3, r1
 80035ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4618      	mov	r0, r3
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	008b      	lsls	r3, r1, #2
 80035ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035d2:	0082      	lsls	r2, r0, #2
 80035d4:	4650      	mov	r0, sl
 80035d6:	4659      	mov	r1, fp
 80035d8:	f7fc fe82 	bl	80002e0 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <UART_SetConfig+0x38c>)
 80035e2:	fba3 1302 	umull	r1, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2164      	movs	r1, #100	; 0x64
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	3332      	adds	r3, #50	; 0x32
 80035f4:	4a09      	ldr	r2, [pc, #36]	; (800361c <UART_SetConfig+0x38c>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4432      	add	r2, r6
 8003606:	609a      	str	r2, [r3, #8]
}
 8003608:	bf00      	nop
 800360a:	377c      	adds	r7, #124	; 0x7c
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003612:	bf00      	nop
 8003614:	40011000 	.word	0x40011000
 8003618:	40011400 	.word	0x40011400
 800361c:	51eb851f 	.word	0x51eb851f

08003620 <__errno>:
 8003620:	4b01      	ldr	r3, [pc, #4]	; (8003628 <__errno+0x8>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000010 	.word	0x20000010

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4d0d      	ldr	r5, [pc, #52]	; (8003664 <__libc_init_array+0x38>)
 8003630:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	2600      	movs	r6, #0
 8003638:	42a6      	cmp	r6, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	4d0b      	ldr	r5, [pc, #44]	; (800366c <__libc_init_array+0x40>)
 800363e:	4c0c      	ldr	r4, [pc, #48]	; (8003670 <__libc_init_array+0x44>)
 8003640:	f000 fdf0 	bl	8004224 <_init>
 8003644:	1b64      	subs	r4, r4, r5
 8003646:	10a4      	asrs	r4, r4, #2
 8003648:	2600      	movs	r6, #0
 800364a:	42a6      	cmp	r6, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f855 3b04 	ldr.w	r3, [r5], #4
 8003654:	4798      	blx	r3
 8003656:	3601      	adds	r6, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f855 3b04 	ldr.w	r3, [r5], #4
 800365e:	4798      	blx	r3
 8003660:	3601      	adds	r6, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	08004418 	.word	0x08004418
 8003668:	08004418 	.word	0x08004418
 800366c:	08004418 	.word	0x08004418
 8003670:	0800441c 	.word	0x0800441c

08003674 <memset>:
 8003674:	4402      	add	r2, r0
 8003676:	4603      	mov	r3, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <siscanf>:
 8003684:	b40e      	push	{r1, r2, r3}
 8003686:	b510      	push	{r4, lr}
 8003688:	b09f      	sub	sp, #124	; 0x7c
 800368a:	ac21      	add	r4, sp, #132	; 0x84
 800368c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003690:	f854 2b04 	ldr.w	r2, [r4], #4
 8003694:	9201      	str	r2, [sp, #4]
 8003696:	f8ad 101c 	strh.w	r1, [sp, #28]
 800369a:	9004      	str	r0, [sp, #16]
 800369c:	9008      	str	r0, [sp, #32]
 800369e:	f7fc fdc1 	bl	8000224 <strlen>
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <siscanf+0x50>)
 80036a4:	9005      	str	r0, [sp, #20]
 80036a6:	9009      	str	r0, [sp, #36]	; 0x24
 80036a8:	930d      	str	r3, [sp, #52]	; 0x34
 80036aa:	480b      	ldr	r0, [pc, #44]	; (80036d8 <siscanf+0x54>)
 80036ac:	9a01      	ldr	r2, [sp, #4]
 80036ae:	6800      	ldr	r0, [r0, #0]
 80036b0:	9403      	str	r4, [sp, #12]
 80036b2:	2300      	movs	r3, #0
 80036b4:	9311      	str	r3, [sp, #68]	; 0x44
 80036b6:	9316      	str	r3, [sp, #88]	; 0x58
 80036b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036bc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80036c0:	a904      	add	r1, sp, #16
 80036c2:	4623      	mov	r3, r4
 80036c4:	f000 f86e 	bl	80037a4 <__ssvfiscanf_r>
 80036c8:	b01f      	add	sp, #124	; 0x7c
 80036ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ce:	b003      	add	sp, #12
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	20000010 	.word	0x20000010

080036dc <__seofread>:
 80036dc:	2000      	movs	r0, #0
 80036de:	4770      	bx	lr

080036e0 <strcpy>:
 80036e0:	4603      	mov	r3, r0
 80036e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036e6:	f803 2b01 	strb.w	r2, [r3], #1
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d1f9      	bne.n	80036e2 <strcpy+0x2>
 80036ee:	4770      	bx	lr

080036f0 <_sungetc_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	1c4b      	adds	r3, r1, #1
 80036f4:	4614      	mov	r4, r2
 80036f6:	d103      	bne.n	8003700 <_sungetc_r+0x10>
 80036f8:	f04f 35ff 	mov.w	r5, #4294967295
 80036fc:	4628      	mov	r0, r5
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	8993      	ldrh	r3, [r2, #12]
 8003702:	f023 0320 	bic.w	r3, r3, #32
 8003706:	8193      	strh	r3, [r2, #12]
 8003708:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800370a:	6852      	ldr	r2, [r2, #4]
 800370c:	b2cd      	uxtb	r5, r1
 800370e:	b18b      	cbz	r3, 8003734 <_sungetc_r+0x44>
 8003710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003712:	4293      	cmp	r3, r2
 8003714:	dd08      	ble.n	8003728 <_sungetc_r+0x38>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	6022      	str	r2, [r4, #0]
 800371c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003720:	6863      	ldr	r3, [r4, #4]
 8003722:	3301      	adds	r3, #1
 8003724:	6063      	str	r3, [r4, #4]
 8003726:	e7e9      	b.n	80036fc <_sungetc_r+0xc>
 8003728:	4621      	mov	r1, r4
 800372a:	f000 fc3d 	bl	8003fa8 <__submore>
 800372e:	2800      	cmp	r0, #0
 8003730:	d0f1      	beq.n	8003716 <_sungetc_r+0x26>
 8003732:	e7e1      	b.n	80036f8 <_sungetc_r+0x8>
 8003734:	6921      	ldr	r1, [r4, #16]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	b151      	cbz	r1, 8003750 <_sungetc_r+0x60>
 800373a:	4299      	cmp	r1, r3
 800373c:	d208      	bcs.n	8003750 <_sungetc_r+0x60>
 800373e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003742:	42a9      	cmp	r1, r5
 8003744:	d104      	bne.n	8003750 <_sungetc_r+0x60>
 8003746:	3b01      	subs	r3, #1
 8003748:	3201      	adds	r2, #1
 800374a:	6023      	str	r3, [r4, #0]
 800374c:	6062      	str	r2, [r4, #4]
 800374e:	e7d5      	b.n	80036fc <_sungetc_r+0xc>
 8003750:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003758:	6363      	str	r3, [r4, #52]	; 0x34
 800375a:	2303      	movs	r3, #3
 800375c:	63a3      	str	r3, [r4, #56]	; 0x38
 800375e:	4623      	mov	r3, r4
 8003760:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	2301      	movs	r3, #1
 8003768:	e7dc      	b.n	8003724 <_sungetc_r+0x34>

0800376a <__ssrefill_r>:
 800376a:	b510      	push	{r4, lr}
 800376c:	460c      	mov	r4, r1
 800376e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003770:	b169      	cbz	r1, 800378e <__ssrefill_r+0x24>
 8003772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003776:	4299      	cmp	r1, r3
 8003778:	d001      	beq.n	800377e <__ssrefill_r+0x14>
 800377a:	f000 fc5f 	bl	800403c <_free_r>
 800377e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003780:	6063      	str	r3, [r4, #4]
 8003782:	2000      	movs	r0, #0
 8003784:	6360      	str	r0, [r4, #52]	; 0x34
 8003786:	b113      	cbz	r3, 800378e <__ssrefill_r+0x24>
 8003788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	bd10      	pop	{r4, pc}
 800378e:	6923      	ldr	r3, [r4, #16]
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	2300      	movs	r3, #0
 8003794:	6063      	str	r3, [r4, #4]
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	f043 0320 	orr.w	r3, r3, #32
 800379c:	81a3      	strh	r3, [r4, #12]
 800379e:	f04f 30ff 	mov.w	r0, #4294967295
 80037a2:	e7f3      	b.n	800378c <__ssrefill_r+0x22>

080037a4 <__ssvfiscanf_r>:
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	460c      	mov	r4, r1
 80037aa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80037ae:	2100      	movs	r1, #0
 80037b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80037b4:	49b2      	ldr	r1, [pc, #712]	; (8003a80 <__ssvfiscanf_r+0x2dc>)
 80037b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80037b8:	f10d 0804 	add.w	r8, sp, #4
 80037bc:	49b1      	ldr	r1, [pc, #708]	; (8003a84 <__ssvfiscanf_r+0x2e0>)
 80037be:	4fb2      	ldr	r7, [pc, #712]	; (8003a88 <__ssvfiscanf_r+0x2e4>)
 80037c0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8003a8c <__ssvfiscanf_r+0x2e8>
 80037c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80037c8:	4606      	mov	r6, r0
 80037ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f892 a000 	ldrb.w	sl, [r2]
 80037d2:	f1ba 0f00 	cmp.w	sl, #0
 80037d6:	f000 8151 	beq.w	8003a7c <__ssvfiscanf_r+0x2d8>
 80037da:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80037de:	f013 0308 	ands.w	r3, r3, #8
 80037e2:	f102 0501 	add.w	r5, r2, #1
 80037e6:	d019      	beq.n	800381c <__ssvfiscanf_r+0x78>
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	dd0f      	ble.n	800380e <__ssvfiscanf_r+0x6a>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	5cba      	ldrb	r2, [r7, r2]
 80037f4:	0712      	lsls	r2, r2, #28
 80037f6:	d401      	bmi.n	80037fc <__ssvfiscanf_r+0x58>
 80037f8:	462a      	mov	r2, r5
 80037fa:	e7e8      	b.n	80037ce <__ssvfiscanf_r+0x2a>
 80037fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80037fe:	3201      	adds	r2, #1
 8003800:	9245      	str	r2, [sp, #276]	; 0x114
 8003802:	6862      	ldr	r2, [r4, #4]
 8003804:	3301      	adds	r3, #1
 8003806:	3a01      	subs	r2, #1
 8003808:	6062      	str	r2, [r4, #4]
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	e7ec      	b.n	80037e8 <__ssvfiscanf_r+0x44>
 800380e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003810:	4621      	mov	r1, r4
 8003812:	4630      	mov	r0, r6
 8003814:	4798      	blx	r3
 8003816:	2800      	cmp	r0, #0
 8003818:	d0e9      	beq.n	80037ee <__ssvfiscanf_r+0x4a>
 800381a:	e7ed      	b.n	80037f8 <__ssvfiscanf_r+0x54>
 800381c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8003820:	f040 8083 	bne.w	800392a <__ssvfiscanf_r+0x186>
 8003824:	9341      	str	r3, [sp, #260]	; 0x104
 8003826:	9343      	str	r3, [sp, #268]	; 0x10c
 8003828:	7853      	ldrb	r3, [r2, #1]
 800382a:	2b2a      	cmp	r3, #42	; 0x2a
 800382c:	bf02      	ittt	eq
 800382e:	2310      	moveq	r3, #16
 8003830:	1c95      	addeq	r5, r2, #2
 8003832:	9341      	streq	r3, [sp, #260]	; 0x104
 8003834:	220a      	movs	r2, #10
 8003836:	46ab      	mov	fp, r5
 8003838:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800383c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003840:	2b09      	cmp	r3, #9
 8003842:	d91d      	bls.n	8003880 <__ssvfiscanf_r+0xdc>
 8003844:	4891      	ldr	r0, [pc, #580]	; (8003a8c <__ssvfiscanf_r+0x2e8>)
 8003846:	2203      	movs	r2, #3
 8003848:	f7fc fcfa 	bl	8000240 <memchr>
 800384c:	b140      	cbz	r0, 8003860 <__ssvfiscanf_r+0xbc>
 800384e:	2301      	movs	r3, #1
 8003850:	eba0 0009 	sub.w	r0, r0, r9
 8003854:	fa03 f000 	lsl.w	r0, r3, r0
 8003858:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800385a:	4318      	orrs	r0, r3
 800385c:	9041      	str	r0, [sp, #260]	; 0x104
 800385e:	465d      	mov	r5, fp
 8003860:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003864:	2b78      	cmp	r3, #120	; 0x78
 8003866:	d806      	bhi.n	8003876 <__ssvfiscanf_r+0xd2>
 8003868:	2b57      	cmp	r3, #87	; 0x57
 800386a:	d810      	bhi.n	800388e <__ssvfiscanf_r+0xea>
 800386c:	2b25      	cmp	r3, #37	; 0x25
 800386e:	d05c      	beq.n	800392a <__ssvfiscanf_r+0x186>
 8003870:	d856      	bhi.n	8003920 <__ssvfiscanf_r+0x17c>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d074      	beq.n	8003960 <__ssvfiscanf_r+0x1bc>
 8003876:	2303      	movs	r3, #3
 8003878:	9347      	str	r3, [sp, #284]	; 0x11c
 800387a:	230a      	movs	r3, #10
 800387c:	9342      	str	r3, [sp, #264]	; 0x108
 800387e:	e081      	b.n	8003984 <__ssvfiscanf_r+0x1e0>
 8003880:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003882:	fb02 1303 	mla	r3, r2, r3, r1
 8003886:	3b30      	subs	r3, #48	; 0x30
 8003888:	9343      	str	r3, [sp, #268]	; 0x10c
 800388a:	465d      	mov	r5, fp
 800388c:	e7d3      	b.n	8003836 <__ssvfiscanf_r+0x92>
 800388e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003892:	2a20      	cmp	r2, #32
 8003894:	d8ef      	bhi.n	8003876 <__ssvfiscanf_r+0xd2>
 8003896:	a101      	add	r1, pc, #4	; (adr r1, 800389c <__ssvfiscanf_r+0xf8>)
 8003898:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800389c:	0800396f 	.word	0x0800396f
 80038a0:	08003877 	.word	0x08003877
 80038a4:	08003877 	.word	0x08003877
 80038a8:	080039cd 	.word	0x080039cd
 80038ac:	08003877 	.word	0x08003877
 80038b0:	08003877 	.word	0x08003877
 80038b4:	08003877 	.word	0x08003877
 80038b8:	08003877 	.word	0x08003877
 80038bc:	08003877 	.word	0x08003877
 80038c0:	08003877 	.word	0x08003877
 80038c4:	08003877 	.word	0x08003877
 80038c8:	080039e3 	.word	0x080039e3
 80038cc:	080039b9 	.word	0x080039b9
 80038d0:	08003927 	.word	0x08003927
 80038d4:	08003927 	.word	0x08003927
 80038d8:	08003927 	.word	0x08003927
 80038dc:	08003877 	.word	0x08003877
 80038e0:	080039bd 	.word	0x080039bd
 80038e4:	08003877 	.word	0x08003877
 80038e8:	08003877 	.word	0x08003877
 80038ec:	08003877 	.word	0x08003877
 80038f0:	08003877 	.word	0x08003877
 80038f4:	080039f3 	.word	0x080039f3
 80038f8:	080039c5 	.word	0x080039c5
 80038fc:	08003967 	.word	0x08003967
 8003900:	08003877 	.word	0x08003877
 8003904:	08003877 	.word	0x08003877
 8003908:	080039ef 	.word	0x080039ef
 800390c:	08003877 	.word	0x08003877
 8003910:	080039b9 	.word	0x080039b9
 8003914:	08003877 	.word	0x08003877
 8003918:	08003877 	.word	0x08003877
 800391c:	0800396f 	.word	0x0800396f
 8003920:	3b45      	subs	r3, #69	; 0x45
 8003922:	2b02      	cmp	r3, #2
 8003924:	d8a7      	bhi.n	8003876 <__ssvfiscanf_r+0xd2>
 8003926:	2305      	movs	r3, #5
 8003928:	e02b      	b.n	8003982 <__ssvfiscanf_r+0x1de>
 800392a:	6863      	ldr	r3, [r4, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dd0d      	ble.n	800394c <__ssvfiscanf_r+0x1a8>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	4552      	cmp	r2, sl
 8003936:	f040 80a1 	bne.w	8003a7c <__ssvfiscanf_r+0x2d8>
 800393a:	3301      	adds	r3, #1
 800393c:	6862      	ldr	r2, [r4, #4]
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003942:	3a01      	subs	r2, #1
 8003944:	3301      	adds	r3, #1
 8003946:	6062      	str	r2, [r4, #4]
 8003948:	9345      	str	r3, [sp, #276]	; 0x114
 800394a:	e755      	b.n	80037f8 <__ssvfiscanf_r+0x54>
 800394c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800394e:	4621      	mov	r1, r4
 8003950:	4630      	mov	r0, r6
 8003952:	4798      	blx	r3
 8003954:	2800      	cmp	r0, #0
 8003956:	d0eb      	beq.n	8003930 <__ssvfiscanf_r+0x18c>
 8003958:	9844      	ldr	r0, [sp, #272]	; 0x110
 800395a:	2800      	cmp	r0, #0
 800395c:	f040 8084 	bne.w	8003a68 <__ssvfiscanf_r+0x2c4>
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	e086      	b.n	8003a74 <__ssvfiscanf_r+0x2d0>
 8003966:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003968:	f042 0220 	orr.w	r2, r2, #32
 800396c:	9241      	str	r2, [sp, #260]	; 0x104
 800396e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003974:	9241      	str	r2, [sp, #260]	; 0x104
 8003976:	2210      	movs	r2, #16
 8003978:	2b6f      	cmp	r3, #111	; 0x6f
 800397a:	9242      	str	r2, [sp, #264]	; 0x108
 800397c:	bf34      	ite	cc
 800397e:	2303      	movcc	r3, #3
 8003980:	2304      	movcs	r3, #4
 8003982:	9347      	str	r3, [sp, #284]	; 0x11c
 8003984:	6863      	ldr	r3, [r4, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	dd41      	ble.n	8003a0e <__ssvfiscanf_r+0x26a>
 800398a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800398c:	0659      	lsls	r1, r3, #25
 800398e:	d404      	bmi.n	800399a <__ssvfiscanf_r+0x1f6>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	5cba      	ldrb	r2, [r7, r2]
 8003996:	0712      	lsls	r2, r2, #28
 8003998:	d440      	bmi.n	8003a1c <__ssvfiscanf_r+0x278>
 800399a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800399c:	2b02      	cmp	r3, #2
 800399e:	dc4f      	bgt.n	8003a40 <__ssvfiscanf_r+0x29c>
 80039a0:	466b      	mov	r3, sp
 80039a2:	4622      	mov	r2, r4
 80039a4:	a941      	add	r1, sp, #260	; 0x104
 80039a6:	4630      	mov	r0, r6
 80039a8:	f000 f874 	bl	8003a94 <_scanf_chars>
 80039ac:	2801      	cmp	r0, #1
 80039ae:	d065      	beq.n	8003a7c <__ssvfiscanf_r+0x2d8>
 80039b0:	2802      	cmp	r0, #2
 80039b2:	f47f af21 	bne.w	80037f8 <__ssvfiscanf_r+0x54>
 80039b6:	e7cf      	b.n	8003958 <__ssvfiscanf_r+0x1b4>
 80039b8:	220a      	movs	r2, #10
 80039ba:	e7dd      	b.n	8003978 <__ssvfiscanf_r+0x1d4>
 80039bc:	2300      	movs	r3, #0
 80039be:	9342      	str	r3, [sp, #264]	; 0x108
 80039c0:	2303      	movs	r3, #3
 80039c2:	e7de      	b.n	8003982 <__ssvfiscanf_r+0x1de>
 80039c4:	2308      	movs	r3, #8
 80039c6:	9342      	str	r3, [sp, #264]	; 0x108
 80039c8:	2304      	movs	r3, #4
 80039ca:	e7da      	b.n	8003982 <__ssvfiscanf_r+0x1de>
 80039cc:	4629      	mov	r1, r5
 80039ce:	4640      	mov	r0, r8
 80039d0:	f000 f9ac 	bl	8003d2c <__sccl>
 80039d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039da:	9341      	str	r3, [sp, #260]	; 0x104
 80039dc:	4605      	mov	r5, r0
 80039de:	2301      	movs	r3, #1
 80039e0:	e7cf      	b.n	8003982 <__ssvfiscanf_r+0x1de>
 80039e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80039e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e8:	9341      	str	r3, [sp, #260]	; 0x104
 80039ea:	2300      	movs	r3, #0
 80039ec:	e7c9      	b.n	8003982 <__ssvfiscanf_r+0x1de>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e7c7      	b.n	8003982 <__ssvfiscanf_r+0x1de>
 80039f2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80039f4:	06c3      	lsls	r3, r0, #27
 80039f6:	f53f aeff 	bmi.w	80037f8 <__ssvfiscanf_r+0x54>
 80039fa:	9b00      	ldr	r3, [sp, #0]
 80039fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80039fe:	1d19      	adds	r1, r3, #4
 8003a00:	9100      	str	r1, [sp, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	07c0      	lsls	r0, r0, #31
 8003a06:	bf4c      	ite	mi
 8003a08:	801a      	strhmi	r2, [r3, #0]
 8003a0a:	601a      	strpl	r2, [r3, #0]
 8003a0c:	e6f4      	b.n	80037f8 <__ssvfiscanf_r+0x54>
 8003a0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a10:	4621      	mov	r1, r4
 8003a12:	4630      	mov	r0, r6
 8003a14:	4798      	blx	r3
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d0b7      	beq.n	800398a <__ssvfiscanf_r+0x1e6>
 8003a1a:	e79d      	b.n	8003958 <__ssvfiscanf_r+0x1b4>
 8003a1c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003a1e:	3201      	adds	r2, #1
 8003a20:	9245      	str	r2, [sp, #276]	; 0x114
 8003a22:	6862      	ldr	r2, [r4, #4]
 8003a24:	3a01      	subs	r2, #1
 8003a26:	2a00      	cmp	r2, #0
 8003a28:	6062      	str	r2, [r4, #4]
 8003a2a:	dd02      	ble.n	8003a32 <__ssvfiscanf_r+0x28e>
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	e7ae      	b.n	8003990 <__ssvfiscanf_r+0x1ec>
 8003a32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003a34:	4621      	mov	r1, r4
 8003a36:	4630      	mov	r0, r6
 8003a38:	4798      	blx	r3
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d0a8      	beq.n	8003990 <__ssvfiscanf_r+0x1ec>
 8003a3e:	e78b      	b.n	8003958 <__ssvfiscanf_r+0x1b4>
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	dc06      	bgt.n	8003a52 <__ssvfiscanf_r+0x2ae>
 8003a44:	466b      	mov	r3, sp
 8003a46:	4622      	mov	r2, r4
 8003a48:	a941      	add	r1, sp, #260	; 0x104
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	f000 f87a 	bl	8003b44 <_scanf_i>
 8003a50:	e7ac      	b.n	80039ac <__ssvfiscanf_r+0x208>
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <__ssvfiscanf_r+0x2ec>)
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f43f aecf 	beq.w	80037f8 <__ssvfiscanf_r+0x54>
 8003a5a:	466b      	mov	r3, sp
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	a941      	add	r1, sp, #260	; 0x104
 8003a60:	4630      	mov	r0, r6
 8003a62:	f3af 8000 	nop.w
 8003a66:	e7a1      	b.n	80039ac <__ssvfiscanf_r+0x208>
 8003a68:	89a3      	ldrh	r3, [r4, #12]
 8003a6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a6e:	bf18      	it	ne
 8003a70:	f04f 30ff 	movne.w	r0, #4294967295
 8003a74:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003a7e:	e7f9      	b.n	8003a74 <__ssvfiscanf_r+0x2d0>
 8003a80:	080036f1 	.word	0x080036f1
 8003a84:	0800376b 	.word	0x0800376b
 8003a88:	080042b0 	.word	0x080042b0
 8003a8c:	08004290 	.word	0x08004290
 8003a90:	00000000 	.word	0x00000000

08003a94 <_scanf_chars>:
 8003a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a98:	4615      	mov	r5, r2
 8003a9a:	688a      	ldr	r2, [r1, #8]
 8003a9c:	4680      	mov	r8, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	b932      	cbnz	r2, 8003ab0 <_scanf_chars+0x1c>
 8003aa2:	698a      	ldr	r2, [r1, #24]
 8003aa4:	2a00      	cmp	r2, #0
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2201      	moveq	r2, #1
 8003aaa:	f04f 32ff 	movne.w	r2, #4294967295
 8003aae:	608a      	str	r2, [r1, #8]
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003b40 <_scanf_chars+0xac>
 8003ab6:	06d1      	lsls	r1, r2, #27
 8003ab8:	bf5f      	itttt	pl
 8003aba:	681a      	ldrpl	r2, [r3, #0]
 8003abc:	1d11      	addpl	r1, r2, #4
 8003abe:	6019      	strpl	r1, [r3, #0]
 8003ac0:	6816      	ldrpl	r6, [r2, #0]
 8003ac2:	2700      	movs	r7, #0
 8003ac4:	69a0      	ldr	r0, [r4, #24]
 8003ac6:	b188      	cbz	r0, 8003aec <_scanf_chars+0x58>
 8003ac8:	2801      	cmp	r0, #1
 8003aca:	d107      	bne.n	8003adc <_scanf_chars+0x48>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	781a      	ldrb	r2, [r3, #0]
 8003ad0:	6963      	ldr	r3, [r4, #20]
 8003ad2:	5c9b      	ldrb	r3, [r3, r2]
 8003ad4:	b953      	cbnz	r3, 8003aec <_scanf_chars+0x58>
 8003ad6:	bb27      	cbnz	r7, 8003b22 <_scanf_chars+0x8e>
 8003ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003adc:	2802      	cmp	r0, #2
 8003ade:	d120      	bne.n	8003b22 <_scanf_chars+0x8e>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003ae8:	071b      	lsls	r3, r3, #28
 8003aea:	d41a      	bmi.n	8003b22 <_scanf_chars+0x8e>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	06da      	lsls	r2, r3, #27
 8003af0:	bf5e      	ittt	pl
 8003af2:	682b      	ldrpl	r3, [r5, #0]
 8003af4:	781b      	ldrbpl	r3, [r3, #0]
 8003af6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003afa:	682a      	ldr	r2, [r5, #0]
 8003afc:	686b      	ldr	r3, [r5, #4]
 8003afe:	3201      	adds	r2, #1
 8003b00:	602a      	str	r2, [r5, #0]
 8003b02:	68a2      	ldr	r2, [r4, #8]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	3a01      	subs	r2, #1
 8003b08:	606b      	str	r3, [r5, #4]
 8003b0a:	3701      	adds	r7, #1
 8003b0c:	60a2      	str	r2, [r4, #8]
 8003b0e:	b142      	cbz	r2, 8003b22 <_scanf_chars+0x8e>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dcd7      	bgt.n	8003ac4 <_scanf_chars+0x30>
 8003b14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b18:	4629      	mov	r1, r5
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	4798      	blx	r3
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d0d0      	beq.n	8003ac4 <_scanf_chars+0x30>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	f013 0310 	ands.w	r3, r3, #16
 8003b28:	d105      	bne.n	8003b36 <_scanf_chars+0xa2>
 8003b2a:	68e2      	ldr	r2, [r4, #12]
 8003b2c:	3201      	adds	r2, #1
 8003b2e:	60e2      	str	r2, [r4, #12]
 8003b30:	69a2      	ldr	r2, [r4, #24]
 8003b32:	b102      	cbz	r2, 8003b36 <_scanf_chars+0xa2>
 8003b34:	7033      	strb	r3, [r6, #0]
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	441f      	add	r7, r3
 8003b3a:	6127      	str	r7, [r4, #16]
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e7cb      	b.n	8003ad8 <_scanf_chars+0x44>
 8003b40:	080042b0 	.word	0x080042b0

08003b44 <_scanf_i>:
 8003b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b48:	4698      	mov	r8, r3
 8003b4a:	4b74      	ldr	r3, [pc, #464]	; (8003d1c <_scanf_i+0x1d8>)
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	4682      	mov	sl, r0
 8003b50:	4616      	mov	r6, r2
 8003b52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b56:	b087      	sub	sp, #28
 8003b58:	ab03      	add	r3, sp, #12
 8003b5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <_scanf_i+0x1dc>)
 8003b60:	69a1      	ldr	r1, [r4, #24]
 8003b62:	4a70      	ldr	r2, [pc, #448]	; (8003d24 <_scanf_i+0x1e0>)
 8003b64:	2903      	cmp	r1, #3
 8003b66:	bf18      	it	ne
 8003b68:	461a      	movne	r2, r3
 8003b6a:	68a3      	ldr	r3, [r4, #8]
 8003b6c:	9201      	str	r2, [sp, #4]
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003b74:	bf88      	it	hi
 8003b76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003b7a:	4627      	mov	r7, r4
 8003b7c:	bf82      	ittt	hi
 8003b7e:	eb03 0905 	addhi.w	r9, r3, r5
 8003b82:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b86:	60a3      	strhi	r3, [r4, #8]
 8003b88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003b8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003b90:	bf98      	it	ls
 8003b92:	f04f 0900 	movls.w	r9, #0
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	463d      	mov	r5, r7
 8003b9a:	f04f 0b00 	mov.w	fp, #0
 8003b9e:	6831      	ldr	r1, [r6, #0]
 8003ba0:	ab03      	add	r3, sp, #12
 8003ba2:	7809      	ldrb	r1, [r1, #0]
 8003ba4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f7fc fb49 	bl	8000240 <memchr>
 8003bae:	b328      	cbz	r0, 8003bfc <_scanf_i+0xb8>
 8003bb0:	f1bb 0f01 	cmp.w	fp, #1
 8003bb4:	d159      	bne.n	8003c6a <_scanf_i+0x126>
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	b92a      	cbnz	r2, 8003bc6 <_scanf_i+0x82>
 8003bba:	6822      	ldr	r2, [r4, #0]
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc2:	6063      	str	r3, [r4, #4]
 8003bc4:	6022      	str	r2, [r4, #0]
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003bcc:	6022      	str	r2, [r4, #0]
 8003bce:	68a2      	ldr	r2, [r4, #8]
 8003bd0:	1e51      	subs	r1, r2, #1
 8003bd2:	60a1      	str	r1, [r4, #8]
 8003bd4:	b192      	cbz	r2, 8003bfc <_scanf_i+0xb8>
 8003bd6:	6832      	ldr	r2, [r6, #0]
 8003bd8:	1c51      	adds	r1, r2, #1
 8003bda:	6031      	str	r1, [r6, #0]
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	f805 2b01 	strb.w	r2, [r5], #1
 8003be2:	6872      	ldr	r2, [r6, #4]
 8003be4:	3a01      	subs	r2, #1
 8003be6:	2a00      	cmp	r2, #0
 8003be8:	6072      	str	r2, [r6, #4]
 8003bea:	dc07      	bgt.n	8003bfc <_scanf_i+0xb8>
 8003bec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4650      	mov	r0, sl
 8003bf4:	4790      	blx	r2
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	f040 8085 	bne.w	8003d06 <_scanf_i+0x1c2>
 8003bfc:	f10b 0b01 	add.w	fp, fp, #1
 8003c00:	f1bb 0f03 	cmp.w	fp, #3
 8003c04:	d1cb      	bne.n	8003b9e <_scanf_i+0x5a>
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	b90b      	cbnz	r3, 8003c0e <_scanf_i+0xca>
 8003c0a:	230a      	movs	r3, #10
 8003c0c:	6063      	str	r3, [r4, #4]
 8003c0e:	6863      	ldr	r3, [r4, #4]
 8003c10:	4945      	ldr	r1, [pc, #276]	; (8003d28 <_scanf_i+0x1e4>)
 8003c12:	6960      	ldr	r0, [r4, #20]
 8003c14:	1ac9      	subs	r1, r1, r3
 8003c16:	f000 f889 	bl	8003d2c <__sccl>
 8003c1a:	f04f 0b00 	mov.w	fp, #0
 8003c1e:	68a3      	ldr	r3, [r4, #8]
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03d      	beq.n	8003ca2 <_scanf_i+0x15e>
 8003c26:	6831      	ldr	r1, [r6, #0]
 8003c28:	6960      	ldr	r0, [r4, #20]
 8003c2a:	f891 c000 	ldrb.w	ip, [r1]
 8003c2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d035      	beq.n	8003ca2 <_scanf_i+0x15e>
 8003c36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003c3a:	d124      	bne.n	8003c86 <_scanf_i+0x142>
 8003c3c:	0510      	lsls	r0, r2, #20
 8003c3e:	d522      	bpl.n	8003c86 <_scanf_i+0x142>
 8003c40:	f10b 0b01 	add.w	fp, fp, #1
 8003c44:	f1b9 0f00 	cmp.w	r9, #0
 8003c48:	d003      	beq.n	8003c52 <_scanf_i+0x10e>
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8003c50:	60a3      	str	r3, [r4, #8]
 8003c52:	6873      	ldr	r3, [r6, #4]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	6073      	str	r3, [r6, #4]
 8003c5a:	dd1b      	ble.n	8003c94 <_scanf_i+0x150>
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	6033      	str	r3, [r6, #0]
 8003c62:	68a3      	ldr	r3, [r4, #8]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	60a3      	str	r3, [r4, #8]
 8003c68:	e7d9      	b.n	8003c1e <_scanf_i+0xda>
 8003c6a:	f1bb 0f02 	cmp.w	fp, #2
 8003c6e:	d1ae      	bne.n	8003bce <_scanf_i+0x8a>
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003c76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003c7a:	d1bf      	bne.n	8003bfc <_scanf_i+0xb8>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	6063      	str	r3, [r4, #4]
 8003c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c84:	e7a2      	b.n	8003bcc <_scanf_i+0x88>
 8003c86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	780b      	ldrb	r3, [r1, #0]
 8003c8e:	f805 3b01 	strb.w	r3, [r5], #1
 8003c92:	e7de      	b.n	8003c52 <_scanf_i+0x10e>
 8003c94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c98:	4631      	mov	r1, r6
 8003c9a:	4650      	mov	r0, sl
 8003c9c:	4798      	blx	r3
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d0df      	beq.n	8003c62 <_scanf_i+0x11e>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	05d9      	lsls	r1, r3, #23
 8003ca6:	d50d      	bpl.n	8003cc4 <_scanf_i+0x180>
 8003ca8:	42bd      	cmp	r5, r7
 8003caa:	d909      	bls.n	8003cc0 <_scanf_i+0x17c>
 8003cac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cb4:	4632      	mov	r2, r6
 8003cb6:	4650      	mov	r0, sl
 8003cb8:	4798      	blx	r3
 8003cba:	f105 39ff 	add.w	r9, r5, #4294967295
 8003cbe:	464d      	mov	r5, r9
 8003cc0:	42bd      	cmp	r5, r7
 8003cc2:	d028      	beq.n	8003d16 <_scanf_i+0x1d2>
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	f012 0210 	ands.w	r2, r2, #16
 8003cca:	d113      	bne.n	8003cf4 <_scanf_i+0x1b0>
 8003ccc:	702a      	strb	r2, [r5, #0]
 8003cce:	6863      	ldr	r3, [r4, #4]
 8003cd0:	9e01      	ldr	r6, [sp, #4]
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	47b0      	blx	r6
 8003cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cdc:	6821      	ldr	r1, [r4, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	f8c8 2000 	str.w	r2, [r8]
 8003ce4:	f011 0f20 	tst.w	r1, #32
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	d00f      	beq.n	8003d0c <_scanf_i+0x1c8>
 8003cec:	6018      	str	r0, [r3, #0]
 8003cee:	68e3      	ldr	r3, [r4, #12]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	60e3      	str	r3, [r4, #12]
 8003cf4:	1bed      	subs	r5, r5, r7
 8003cf6:	44ab      	add	fp, r5
 8003cf8:	6925      	ldr	r5, [r4, #16]
 8003cfa:	445d      	add	r5, fp
 8003cfc:	6125      	str	r5, [r4, #16]
 8003cfe:	2000      	movs	r0, #0
 8003d00:	b007      	add	sp, #28
 8003d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d06:	f04f 0b00 	mov.w	fp, #0
 8003d0a:	e7ca      	b.n	8003ca2 <_scanf_i+0x15e>
 8003d0c:	07ca      	lsls	r2, r1, #31
 8003d0e:	bf4c      	ite	mi
 8003d10:	8018      	strhmi	r0, [r3, #0]
 8003d12:	6018      	strpl	r0, [r3, #0]
 8003d14:	e7eb      	b.n	8003cee <_scanf_i+0x1aa>
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7f2      	b.n	8003d00 <_scanf_i+0x1bc>
 8003d1a:	bf00      	nop
 8003d1c:	08004264 	.word	0x08004264
 8003d20:	08003fa5 	.word	0x08003fa5
 8003d24:	08003ea9 	.word	0x08003ea9
 8003d28:	080042ad 	.word	0x080042ad

08003d2c <__sccl>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	780b      	ldrb	r3, [r1, #0]
 8003d30:	4604      	mov	r4, r0
 8003d32:	2b5e      	cmp	r3, #94	; 0x5e
 8003d34:	bf0b      	itete	eq
 8003d36:	784b      	ldrbeq	r3, [r1, #1]
 8003d38:	1c48      	addne	r0, r1, #1
 8003d3a:	1c88      	addeq	r0, r1, #2
 8003d3c:	2200      	movne	r2, #0
 8003d3e:	bf08      	it	eq
 8003d40:	2201      	moveq	r2, #1
 8003d42:	1e61      	subs	r1, r4, #1
 8003d44:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003d48:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003d4c:	42a9      	cmp	r1, r5
 8003d4e:	d1fb      	bne.n	8003d48 <__sccl+0x1c>
 8003d50:	b90b      	cbnz	r3, 8003d56 <__sccl+0x2a>
 8003d52:	3801      	subs	r0, #1
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	f082 0101 	eor.w	r1, r2, #1
 8003d5a:	54e1      	strb	r1, [r4, r3]
 8003d5c:	1c42      	adds	r2, r0, #1
 8003d5e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8003d62:	2d2d      	cmp	r5, #45	; 0x2d
 8003d64:	f102 36ff 	add.w	r6, r2, #4294967295
 8003d68:	4610      	mov	r0, r2
 8003d6a:	d006      	beq.n	8003d7a <__sccl+0x4e>
 8003d6c:	2d5d      	cmp	r5, #93	; 0x5d
 8003d6e:	d0f1      	beq.n	8003d54 <__sccl+0x28>
 8003d70:	b90d      	cbnz	r5, 8003d76 <__sccl+0x4a>
 8003d72:	4630      	mov	r0, r6
 8003d74:	e7ee      	b.n	8003d54 <__sccl+0x28>
 8003d76:	462b      	mov	r3, r5
 8003d78:	e7ef      	b.n	8003d5a <__sccl+0x2e>
 8003d7a:	7816      	ldrb	r6, [r2, #0]
 8003d7c:	2e5d      	cmp	r6, #93	; 0x5d
 8003d7e:	d0fa      	beq.n	8003d76 <__sccl+0x4a>
 8003d80:	42b3      	cmp	r3, r6
 8003d82:	dcf8      	bgt.n	8003d76 <__sccl+0x4a>
 8003d84:	4618      	mov	r0, r3
 8003d86:	3001      	adds	r0, #1
 8003d88:	4286      	cmp	r6, r0
 8003d8a:	5421      	strb	r1, [r4, r0]
 8003d8c:	dcfb      	bgt.n	8003d86 <__sccl+0x5a>
 8003d8e:	43d8      	mvns	r0, r3
 8003d90:	4430      	add	r0, r6
 8003d92:	1c5d      	adds	r5, r3, #1
 8003d94:	42b3      	cmp	r3, r6
 8003d96:	bfa8      	it	ge
 8003d98:	2000      	movge	r0, #0
 8003d9a:	182b      	adds	r3, r5, r0
 8003d9c:	3202      	adds	r2, #2
 8003d9e:	e7de      	b.n	8003d5e <__sccl+0x32>

08003da0 <_strtol_l.isra.0>:
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da6:	d001      	beq.n	8003dac <_strtol_l.isra.0+0xc>
 8003da8:	2b24      	cmp	r3, #36	; 0x24
 8003daa:	d906      	bls.n	8003dba <_strtol_l.isra.0+0x1a>
 8003dac:	f7ff fc38 	bl	8003620 <__errno>
 8003db0:	2316      	movs	r3, #22
 8003db2:	6003      	str	r3, [r0, #0]
 8003db4:	2000      	movs	r0, #0
 8003db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dba:	4f3a      	ldr	r7, [pc, #232]	; (8003ea4 <_strtol_l.isra.0+0x104>)
 8003dbc:	468e      	mov	lr, r1
 8003dbe:	4676      	mov	r6, lr
 8003dc0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003dc4:	5de5      	ldrb	r5, [r4, r7]
 8003dc6:	f015 0508 	ands.w	r5, r5, #8
 8003dca:	d1f8      	bne.n	8003dbe <_strtol_l.isra.0+0x1e>
 8003dcc:	2c2d      	cmp	r4, #45	; 0x2d
 8003dce:	d134      	bne.n	8003e3a <_strtol_l.isra.0+0x9a>
 8003dd0:	f89e 4000 	ldrb.w	r4, [lr]
 8003dd4:	f04f 0801 	mov.w	r8, #1
 8003dd8:	f106 0e02 	add.w	lr, r6, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d05c      	beq.n	8003e9a <_strtol_l.isra.0+0xfa>
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	d10c      	bne.n	8003dfe <_strtol_l.isra.0+0x5e>
 8003de4:	2c30      	cmp	r4, #48	; 0x30
 8003de6:	d10a      	bne.n	8003dfe <_strtol_l.isra.0+0x5e>
 8003de8:	f89e 4000 	ldrb.w	r4, [lr]
 8003dec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003df0:	2c58      	cmp	r4, #88	; 0x58
 8003df2:	d14d      	bne.n	8003e90 <_strtol_l.isra.0+0xf0>
 8003df4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003df8:	2310      	movs	r3, #16
 8003dfa:	f10e 0e02 	add.w	lr, lr, #2
 8003dfe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003e02:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003e06:	2600      	movs	r6, #0
 8003e08:	fbbc f9f3 	udiv	r9, ip, r3
 8003e0c:	4635      	mov	r5, r6
 8003e0e:	fb03 ca19 	mls	sl, r3, r9, ip
 8003e12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003e16:	2f09      	cmp	r7, #9
 8003e18:	d818      	bhi.n	8003e4c <_strtol_l.isra.0+0xac>
 8003e1a:	463c      	mov	r4, r7
 8003e1c:	42a3      	cmp	r3, r4
 8003e1e:	dd24      	ble.n	8003e6a <_strtol_l.isra.0+0xca>
 8003e20:	2e00      	cmp	r6, #0
 8003e22:	db1f      	blt.n	8003e64 <_strtol_l.isra.0+0xc4>
 8003e24:	45a9      	cmp	r9, r5
 8003e26:	d31d      	bcc.n	8003e64 <_strtol_l.isra.0+0xc4>
 8003e28:	d101      	bne.n	8003e2e <_strtol_l.isra.0+0x8e>
 8003e2a:	45a2      	cmp	sl, r4
 8003e2c:	db1a      	blt.n	8003e64 <_strtol_l.isra.0+0xc4>
 8003e2e:	fb05 4503 	mla	r5, r5, r3, r4
 8003e32:	2601      	movs	r6, #1
 8003e34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003e38:	e7eb      	b.n	8003e12 <_strtol_l.isra.0+0x72>
 8003e3a:	2c2b      	cmp	r4, #43	; 0x2b
 8003e3c:	bf08      	it	eq
 8003e3e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003e42:	46a8      	mov	r8, r5
 8003e44:	bf08      	it	eq
 8003e46:	f106 0e02 	addeq.w	lr, r6, #2
 8003e4a:	e7c7      	b.n	8003ddc <_strtol_l.isra.0+0x3c>
 8003e4c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003e50:	2f19      	cmp	r7, #25
 8003e52:	d801      	bhi.n	8003e58 <_strtol_l.isra.0+0xb8>
 8003e54:	3c37      	subs	r4, #55	; 0x37
 8003e56:	e7e1      	b.n	8003e1c <_strtol_l.isra.0+0x7c>
 8003e58:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003e5c:	2f19      	cmp	r7, #25
 8003e5e:	d804      	bhi.n	8003e6a <_strtol_l.isra.0+0xca>
 8003e60:	3c57      	subs	r4, #87	; 0x57
 8003e62:	e7db      	b.n	8003e1c <_strtol_l.isra.0+0x7c>
 8003e64:	f04f 36ff 	mov.w	r6, #4294967295
 8003e68:	e7e4      	b.n	8003e34 <_strtol_l.isra.0+0x94>
 8003e6a:	2e00      	cmp	r6, #0
 8003e6c:	da05      	bge.n	8003e7a <_strtol_l.isra.0+0xda>
 8003e6e:	2322      	movs	r3, #34	; 0x22
 8003e70:	6003      	str	r3, [r0, #0]
 8003e72:	4665      	mov	r5, ip
 8003e74:	b942      	cbnz	r2, 8003e88 <_strtol_l.isra.0+0xe8>
 8003e76:	4628      	mov	r0, r5
 8003e78:	e79d      	b.n	8003db6 <_strtol_l.isra.0+0x16>
 8003e7a:	f1b8 0f00 	cmp.w	r8, #0
 8003e7e:	d000      	beq.n	8003e82 <_strtol_l.isra.0+0xe2>
 8003e80:	426d      	negs	r5, r5
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d0f7      	beq.n	8003e76 <_strtol_l.isra.0+0xd6>
 8003e86:	b10e      	cbz	r6, 8003e8c <_strtol_l.isra.0+0xec>
 8003e88:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003e8c:	6011      	str	r1, [r2, #0]
 8003e8e:	e7f2      	b.n	8003e76 <_strtol_l.isra.0+0xd6>
 8003e90:	2430      	movs	r4, #48	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1b3      	bne.n	8003dfe <_strtol_l.isra.0+0x5e>
 8003e96:	2308      	movs	r3, #8
 8003e98:	e7b1      	b.n	8003dfe <_strtol_l.isra.0+0x5e>
 8003e9a:	2c30      	cmp	r4, #48	; 0x30
 8003e9c:	d0a4      	beq.n	8003de8 <_strtol_l.isra.0+0x48>
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	e7ad      	b.n	8003dfe <_strtol_l.isra.0+0x5e>
 8003ea2:	bf00      	nop
 8003ea4:	080042b0 	.word	0x080042b0

08003ea8 <_strtol_r>:
 8003ea8:	f7ff bf7a 	b.w	8003da0 <_strtol_l.isra.0>

08003eac <_strtoul_l.isra.0>:
 8003eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eb0:	4e3b      	ldr	r6, [pc, #236]	; (8003fa0 <_strtoul_l.isra.0+0xf4>)
 8003eb2:	4686      	mov	lr, r0
 8003eb4:	468c      	mov	ip, r1
 8003eb6:	4660      	mov	r0, ip
 8003eb8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003ebc:	5da5      	ldrb	r5, [r4, r6]
 8003ebe:	f015 0508 	ands.w	r5, r5, #8
 8003ec2:	d1f8      	bne.n	8003eb6 <_strtoul_l.isra.0+0xa>
 8003ec4:	2c2d      	cmp	r4, #45	; 0x2d
 8003ec6:	d134      	bne.n	8003f32 <_strtoul_l.isra.0+0x86>
 8003ec8:	f89c 4000 	ldrb.w	r4, [ip]
 8003ecc:	f04f 0801 	mov.w	r8, #1
 8003ed0:	f100 0c02 	add.w	ip, r0, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05e      	beq.n	8003f96 <_strtoul_l.isra.0+0xea>
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d10c      	bne.n	8003ef6 <_strtoul_l.isra.0+0x4a>
 8003edc:	2c30      	cmp	r4, #48	; 0x30
 8003ede:	d10a      	bne.n	8003ef6 <_strtoul_l.isra.0+0x4a>
 8003ee0:	f89c 0000 	ldrb.w	r0, [ip]
 8003ee4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003ee8:	2858      	cmp	r0, #88	; 0x58
 8003eea:	d14f      	bne.n	8003f8c <_strtoul_l.isra.0+0xe0>
 8003eec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f10c 0c02 	add.w	ip, ip, #2
 8003ef6:	f04f 37ff 	mov.w	r7, #4294967295
 8003efa:	2500      	movs	r5, #0
 8003efc:	fbb7 f7f3 	udiv	r7, r7, r3
 8003f00:	fb03 f907 	mul.w	r9, r3, r7
 8003f04:	ea6f 0909 	mvn.w	r9, r9
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003f0e:	2e09      	cmp	r6, #9
 8003f10:	d818      	bhi.n	8003f44 <_strtoul_l.isra.0+0x98>
 8003f12:	4634      	mov	r4, r6
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	dd24      	ble.n	8003f62 <_strtoul_l.isra.0+0xb6>
 8003f18:	2d00      	cmp	r5, #0
 8003f1a:	db1f      	blt.n	8003f5c <_strtoul_l.isra.0+0xb0>
 8003f1c:	4287      	cmp	r7, r0
 8003f1e:	d31d      	bcc.n	8003f5c <_strtoul_l.isra.0+0xb0>
 8003f20:	d101      	bne.n	8003f26 <_strtoul_l.isra.0+0x7a>
 8003f22:	45a1      	cmp	r9, r4
 8003f24:	db1a      	blt.n	8003f5c <_strtoul_l.isra.0+0xb0>
 8003f26:	fb00 4003 	mla	r0, r0, r3, r4
 8003f2a:	2501      	movs	r5, #1
 8003f2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003f30:	e7eb      	b.n	8003f0a <_strtoul_l.isra.0+0x5e>
 8003f32:	2c2b      	cmp	r4, #43	; 0x2b
 8003f34:	bf08      	it	eq
 8003f36:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003f3a:	46a8      	mov	r8, r5
 8003f3c:	bf08      	it	eq
 8003f3e:	f100 0c02 	addeq.w	ip, r0, #2
 8003f42:	e7c7      	b.n	8003ed4 <_strtoul_l.isra.0+0x28>
 8003f44:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003f48:	2e19      	cmp	r6, #25
 8003f4a:	d801      	bhi.n	8003f50 <_strtoul_l.isra.0+0xa4>
 8003f4c:	3c37      	subs	r4, #55	; 0x37
 8003f4e:	e7e1      	b.n	8003f14 <_strtoul_l.isra.0+0x68>
 8003f50:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003f54:	2e19      	cmp	r6, #25
 8003f56:	d804      	bhi.n	8003f62 <_strtoul_l.isra.0+0xb6>
 8003f58:	3c57      	subs	r4, #87	; 0x57
 8003f5a:	e7db      	b.n	8003f14 <_strtoul_l.isra.0+0x68>
 8003f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f60:	e7e4      	b.n	8003f2c <_strtoul_l.isra.0+0x80>
 8003f62:	2d00      	cmp	r5, #0
 8003f64:	da07      	bge.n	8003f76 <_strtoul_l.isra.0+0xca>
 8003f66:	2322      	movs	r3, #34	; 0x22
 8003f68:	f8ce 3000 	str.w	r3, [lr]
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	b942      	cbnz	r2, 8003f84 <_strtoul_l.isra.0+0xd8>
 8003f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f76:	f1b8 0f00 	cmp.w	r8, #0
 8003f7a:	d000      	beq.n	8003f7e <_strtoul_l.isra.0+0xd2>
 8003f7c:	4240      	negs	r0, r0
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d0f7      	beq.n	8003f72 <_strtoul_l.isra.0+0xc6>
 8003f82:	b10d      	cbz	r5, 8003f88 <_strtoul_l.isra.0+0xdc>
 8003f84:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003f88:	6011      	str	r1, [r2, #0]
 8003f8a:	e7f2      	b.n	8003f72 <_strtoul_l.isra.0+0xc6>
 8003f8c:	2430      	movs	r4, #48	; 0x30
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1b1      	bne.n	8003ef6 <_strtoul_l.isra.0+0x4a>
 8003f92:	2308      	movs	r3, #8
 8003f94:	e7af      	b.n	8003ef6 <_strtoul_l.isra.0+0x4a>
 8003f96:	2c30      	cmp	r4, #48	; 0x30
 8003f98:	d0a2      	beq.n	8003ee0 <_strtoul_l.isra.0+0x34>
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	e7ab      	b.n	8003ef6 <_strtoul_l.isra.0+0x4a>
 8003f9e:	bf00      	nop
 8003fa0:	080042b0 	.word	0x080042b0

08003fa4 <_strtoul_r>:
 8003fa4:	f7ff bf82 	b.w	8003eac <_strtoul_l.isra.0>

08003fa8 <__submore>:
 8003fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fac:	460c      	mov	r4, r1
 8003fae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	d11d      	bne.n	8003ff4 <__submore+0x4c>
 8003fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fbc:	f000 f88e 	bl	80040dc <_malloc_r>
 8003fc0:	b918      	cbnz	r0, 8003fca <__submore+0x22>
 8003fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fce:	63a3      	str	r3, [r4, #56]	; 0x38
 8003fd0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8003fd6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003fda:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003fde:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003fe2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003fe6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003fea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003fee:	6020      	str	r0, [r4, #0]
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	e7e8      	b.n	8003fc6 <__submore+0x1e>
 8003ff4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003ff6:	0077      	lsls	r7, r6, #1
 8003ff8:	463a      	mov	r2, r7
 8003ffa:	f000 f8c9 	bl	8004190 <_realloc_r>
 8003ffe:	4605      	mov	r5, r0
 8004000:	2800      	cmp	r0, #0
 8004002:	d0de      	beq.n	8003fc2 <__submore+0x1a>
 8004004:	eb00 0806 	add.w	r8, r0, r6
 8004008:	4601      	mov	r1, r0
 800400a:	4632      	mov	r2, r6
 800400c:	4640      	mov	r0, r8
 800400e:	f000 f807 	bl	8004020 <memcpy>
 8004012:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004016:	f8c4 8000 	str.w	r8, [r4]
 800401a:	e7e9      	b.n	8003ff0 <__submore+0x48>

0800401c <__retarget_lock_acquire_recursive>:
 800401c:	4770      	bx	lr

0800401e <__retarget_lock_release_recursive>:
 800401e:	4770      	bx	lr

08004020 <memcpy>:
 8004020:	440a      	add	r2, r1
 8004022:	4291      	cmp	r1, r2
 8004024:	f100 33ff 	add.w	r3, r0, #4294967295
 8004028:	d100      	bne.n	800402c <memcpy+0xc>
 800402a:	4770      	bx	lr
 800402c:	b510      	push	{r4, lr}
 800402e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004036:	4291      	cmp	r1, r2
 8004038:	d1f9      	bne.n	800402e <memcpy+0xe>
 800403a:	bd10      	pop	{r4, pc}

0800403c <_free_r>:
 800403c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800403e:	2900      	cmp	r1, #0
 8004040:	d048      	beq.n	80040d4 <_free_r+0x98>
 8004042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004046:	9001      	str	r0, [sp, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f1a1 0404 	sub.w	r4, r1, #4
 800404e:	bfb8      	it	lt
 8004050:	18e4      	addlt	r4, r4, r3
 8004052:	f000 f8d3 	bl	80041fc <__malloc_lock>
 8004056:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <_free_r+0x9c>)
 8004058:	9801      	ldr	r0, [sp, #4]
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	4615      	mov	r5, r2
 800405e:	b933      	cbnz	r3, 800406e <_free_r+0x32>
 8004060:	6063      	str	r3, [r4, #4]
 8004062:	6014      	str	r4, [r2, #0]
 8004064:	b003      	add	sp, #12
 8004066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800406a:	f000 b8cd 	b.w	8004208 <__malloc_unlock>
 800406e:	42a3      	cmp	r3, r4
 8004070:	d90b      	bls.n	800408a <_free_r+0x4e>
 8004072:	6821      	ldr	r1, [r4, #0]
 8004074:	1862      	adds	r2, r4, r1
 8004076:	4293      	cmp	r3, r2
 8004078:	bf04      	itt	eq
 800407a:	681a      	ldreq	r2, [r3, #0]
 800407c:	685b      	ldreq	r3, [r3, #4]
 800407e:	6063      	str	r3, [r4, #4]
 8004080:	bf04      	itt	eq
 8004082:	1852      	addeq	r2, r2, r1
 8004084:	6022      	streq	r2, [r4, #0]
 8004086:	602c      	str	r4, [r5, #0]
 8004088:	e7ec      	b.n	8004064 <_free_r+0x28>
 800408a:	461a      	mov	r2, r3
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	b10b      	cbz	r3, 8004094 <_free_r+0x58>
 8004090:	42a3      	cmp	r3, r4
 8004092:	d9fa      	bls.n	800408a <_free_r+0x4e>
 8004094:	6811      	ldr	r1, [r2, #0]
 8004096:	1855      	adds	r5, r2, r1
 8004098:	42a5      	cmp	r5, r4
 800409a:	d10b      	bne.n	80040b4 <_free_r+0x78>
 800409c:	6824      	ldr	r4, [r4, #0]
 800409e:	4421      	add	r1, r4
 80040a0:	1854      	adds	r4, r2, r1
 80040a2:	42a3      	cmp	r3, r4
 80040a4:	6011      	str	r1, [r2, #0]
 80040a6:	d1dd      	bne.n	8004064 <_free_r+0x28>
 80040a8:	681c      	ldr	r4, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	6053      	str	r3, [r2, #4]
 80040ae:	4421      	add	r1, r4
 80040b0:	6011      	str	r1, [r2, #0]
 80040b2:	e7d7      	b.n	8004064 <_free_r+0x28>
 80040b4:	d902      	bls.n	80040bc <_free_r+0x80>
 80040b6:	230c      	movs	r3, #12
 80040b8:	6003      	str	r3, [r0, #0]
 80040ba:	e7d3      	b.n	8004064 <_free_r+0x28>
 80040bc:	6825      	ldr	r5, [r4, #0]
 80040be:	1961      	adds	r1, r4, r5
 80040c0:	428b      	cmp	r3, r1
 80040c2:	bf04      	itt	eq
 80040c4:	6819      	ldreq	r1, [r3, #0]
 80040c6:	685b      	ldreq	r3, [r3, #4]
 80040c8:	6063      	str	r3, [r4, #4]
 80040ca:	bf04      	itt	eq
 80040cc:	1949      	addeq	r1, r1, r5
 80040ce:	6021      	streq	r1, [r4, #0]
 80040d0:	6054      	str	r4, [r2, #4]
 80040d2:	e7c7      	b.n	8004064 <_free_r+0x28>
 80040d4:	b003      	add	sp, #12
 80040d6:	bd30      	pop	{r4, r5, pc}
 80040d8:	20003f24 	.word	0x20003f24

080040dc <_malloc_r>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	1ccd      	adds	r5, r1, #3
 80040e0:	f025 0503 	bic.w	r5, r5, #3
 80040e4:	3508      	adds	r5, #8
 80040e6:	2d0c      	cmp	r5, #12
 80040e8:	bf38      	it	cc
 80040ea:	250c      	movcc	r5, #12
 80040ec:	2d00      	cmp	r5, #0
 80040ee:	4606      	mov	r6, r0
 80040f0:	db01      	blt.n	80040f6 <_malloc_r+0x1a>
 80040f2:	42a9      	cmp	r1, r5
 80040f4:	d903      	bls.n	80040fe <_malloc_r+0x22>
 80040f6:	230c      	movs	r3, #12
 80040f8:	6033      	str	r3, [r6, #0]
 80040fa:	2000      	movs	r0, #0
 80040fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fe:	f000 f87d 	bl	80041fc <__malloc_lock>
 8004102:	4921      	ldr	r1, [pc, #132]	; (8004188 <_malloc_r+0xac>)
 8004104:	680a      	ldr	r2, [r1, #0]
 8004106:	4614      	mov	r4, r2
 8004108:	b99c      	cbnz	r4, 8004132 <_malloc_r+0x56>
 800410a:	4f20      	ldr	r7, [pc, #128]	; (800418c <_malloc_r+0xb0>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	b923      	cbnz	r3, 800411a <_malloc_r+0x3e>
 8004110:	4621      	mov	r1, r4
 8004112:	4630      	mov	r0, r6
 8004114:	f000 f862 	bl	80041dc <_sbrk_r>
 8004118:	6038      	str	r0, [r7, #0]
 800411a:	4629      	mov	r1, r5
 800411c:	4630      	mov	r0, r6
 800411e:	f000 f85d 	bl	80041dc <_sbrk_r>
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	d123      	bne.n	800416e <_malloc_r+0x92>
 8004126:	230c      	movs	r3, #12
 8004128:	6033      	str	r3, [r6, #0]
 800412a:	4630      	mov	r0, r6
 800412c:	f000 f86c 	bl	8004208 <__malloc_unlock>
 8004130:	e7e3      	b.n	80040fa <_malloc_r+0x1e>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	1b5b      	subs	r3, r3, r5
 8004136:	d417      	bmi.n	8004168 <_malloc_r+0x8c>
 8004138:	2b0b      	cmp	r3, #11
 800413a:	d903      	bls.n	8004144 <_malloc_r+0x68>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	441c      	add	r4, r3
 8004140:	6025      	str	r5, [r4, #0]
 8004142:	e004      	b.n	800414e <_malloc_r+0x72>
 8004144:	6863      	ldr	r3, [r4, #4]
 8004146:	42a2      	cmp	r2, r4
 8004148:	bf0c      	ite	eq
 800414a:	600b      	streq	r3, [r1, #0]
 800414c:	6053      	strne	r3, [r2, #4]
 800414e:	4630      	mov	r0, r6
 8004150:	f000 f85a 	bl	8004208 <__malloc_unlock>
 8004154:	f104 000b 	add.w	r0, r4, #11
 8004158:	1d23      	adds	r3, r4, #4
 800415a:	f020 0007 	bic.w	r0, r0, #7
 800415e:	1ac2      	subs	r2, r0, r3
 8004160:	d0cc      	beq.n	80040fc <_malloc_r+0x20>
 8004162:	1a1b      	subs	r3, r3, r0
 8004164:	50a3      	str	r3, [r4, r2]
 8004166:	e7c9      	b.n	80040fc <_malloc_r+0x20>
 8004168:	4622      	mov	r2, r4
 800416a:	6864      	ldr	r4, [r4, #4]
 800416c:	e7cc      	b.n	8004108 <_malloc_r+0x2c>
 800416e:	1cc4      	adds	r4, r0, #3
 8004170:	f024 0403 	bic.w	r4, r4, #3
 8004174:	42a0      	cmp	r0, r4
 8004176:	d0e3      	beq.n	8004140 <_malloc_r+0x64>
 8004178:	1a21      	subs	r1, r4, r0
 800417a:	4630      	mov	r0, r6
 800417c:	f000 f82e 	bl	80041dc <_sbrk_r>
 8004180:	3001      	adds	r0, #1
 8004182:	d1dd      	bne.n	8004140 <_malloc_r+0x64>
 8004184:	e7cf      	b.n	8004126 <_malloc_r+0x4a>
 8004186:	bf00      	nop
 8004188:	20003f24 	.word	0x20003f24
 800418c:	20003f28 	.word	0x20003f28

08004190 <_realloc_r>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	4607      	mov	r7, r0
 8004194:	4614      	mov	r4, r2
 8004196:	460e      	mov	r6, r1
 8004198:	b921      	cbnz	r1, 80041a4 <_realloc_r+0x14>
 800419a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800419e:	4611      	mov	r1, r2
 80041a0:	f7ff bf9c 	b.w	80040dc <_malloc_r>
 80041a4:	b922      	cbnz	r2, 80041b0 <_realloc_r+0x20>
 80041a6:	f7ff ff49 	bl	800403c <_free_r>
 80041aa:	4625      	mov	r5, r4
 80041ac:	4628      	mov	r0, r5
 80041ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b0:	f000 f830 	bl	8004214 <_malloc_usable_size_r>
 80041b4:	42a0      	cmp	r0, r4
 80041b6:	d20f      	bcs.n	80041d8 <_realloc_r+0x48>
 80041b8:	4621      	mov	r1, r4
 80041ba:	4638      	mov	r0, r7
 80041bc:	f7ff ff8e 	bl	80040dc <_malloc_r>
 80041c0:	4605      	mov	r5, r0
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d0f2      	beq.n	80041ac <_realloc_r+0x1c>
 80041c6:	4631      	mov	r1, r6
 80041c8:	4622      	mov	r2, r4
 80041ca:	f7ff ff29 	bl	8004020 <memcpy>
 80041ce:	4631      	mov	r1, r6
 80041d0:	4638      	mov	r0, r7
 80041d2:	f7ff ff33 	bl	800403c <_free_r>
 80041d6:	e7e9      	b.n	80041ac <_realloc_r+0x1c>
 80041d8:	4635      	mov	r5, r6
 80041da:	e7e7      	b.n	80041ac <_realloc_r+0x1c>

080041dc <_sbrk_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4d06      	ldr	r5, [pc, #24]	; (80041f8 <_sbrk_r+0x1c>)
 80041e0:	2300      	movs	r3, #0
 80041e2:	4604      	mov	r4, r0
 80041e4:	4608      	mov	r0, r1
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fc fdb2 	bl	8000d50 <_sbrk>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_sbrk_r+0x1a>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_sbrk_r+0x1a>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20004100 	.word	0x20004100

080041fc <__malloc_lock>:
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <__malloc_lock+0x8>)
 80041fe:	f7ff bf0d 	b.w	800401c <__retarget_lock_acquire_recursive>
 8004202:	bf00      	nop
 8004204:	20004108 	.word	0x20004108

08004208 <__malloc_unlock>:
 8004208:	4801      	ldr	r0, [pc, #4]	; (8004210 <__malloc_unlock+0x8>)
 800420a:	f7ff bf08 	b.w	800401e <__retarget_lock_release_recursive>
 800420e:	bf00      	nop
 8004210:	20004108 	.word	0x20004108

08004214 <_malloc_usable_size_r>:
 8004214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004218:	1f18      	subs	r0, r3, #4
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfbc      	itt	lt
 800421e:	580b      	ldrlt	r3, [r1, r0]
 8004220:	18c0      	addlt	r0, r0, r3
 8004222:	4770      	bx	lr

08004224 <_init>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr

08004230 <_fini>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr
